---
description: 本规范为 GitHub Actions 开发提供全面指导，涵盖最佳实践、编码标准、性能、安全性和测试。旨在确保高效、可靠、安全和可维护的工作流程。
globs: ".github/workflows/*.yml"
---
# GitHub Actions 最佳实践和编码标准

本指南为开发高效、可靠、安全和可维护的 GitHub Actions 工作流程提供全面指导。它涵盖了 GitHub Actions 开发的各个方面，包括代码组织、常见模式、性能考虑、安全最佳实践、测试方法和工具。

## 1. 代码组织和结构

### 1.1 目录结构最佳实践

- **工作流程目录：** 将所有工作流程文件存储在 `.github/workflows` 目录中。这是 GitHub 识别的标准位置。
- **可重用操作目录（可选）：** 如果您创建自定义可重用操作，考虑将它们存储在仓库内的专用目录中，如 `actions/`。
- **脚本目录（可选）：** 对于复杂的工作流程，您可能有支持脚本（例如，shell 脚本、Python 脚本）。将这些存储在 `scripts/` 目录中。
- **示例目录结构：**

```
.github/
└── workflows/
    ├── main.yml
    ├── deploy.yml
    └── release.yml
actions/
    ├── my-custom-action/
    │   ├── action.yml
    │   └── index.js
scripts/
    ├── cleanup.sh
    └── build.py
```

### 1.2 文件命名约定

- **工作流程文件：** 为工作流程文件使用描述性和一致的名称（例如，`deploy-staging.yml`、`code-analysis.yml`）。如果可能，避免使用通用名称如 `main.yml`，特别是在有多个工作流程的仓库中。
- **操作文件：** 将操作文件命名为 `action.yml` 或 `action.yaml` 以清楚表明其用途。
- **脚本文件：** 为脚本使用适当的扩展名（例如，shell 脚本使用 `.sh`，Python 脚本使用 `.py`）。

### 1.3 模块组织

- **可重用工作流程：** 使用 `uses:` 语法将复杂工作流程分解为更小的可重用工作流程。这促进模块化，减少重复，并提高可维护性。
- **复合操作：** 对于工作流程中的可重用步骤，考虑创建复合操作。这些将多个步骤分组为单个操作。
- **模块化脚本：** 如果您使用脚本，将它们组织成模块或函数以获得更好的可读性和可重用性。

### 1.4 组件架构

- **工作流程作为组件：** 将每个工作流程视为负责特定任务（例如，构建、测试、部署）的独立组件。
- **关注点分离：** 在工作流程中分离关注点。例如，为构建、测试和部署使用不同的作业。
- **输入和输出：** 为可重用工作流程和复合操作定义清晰的输入和输出以提高其可组合性。

### 1.5 代码分割策略

- **作业分割：** 将工作流程分为多个并行运行的作业以减少总执行时间。
- **步骤分割：** 将长时间运行的步骤分解为更小、更易管理的步骤。
- **条件执行：** 使用 `if:` 条件根据特定标准（例如，分支名称、文件更改）有条件地执行作业或步骤。

## 2. 常见模式和反模式

### 2.1 GitHub Actions 特定的设计模式

- **扇出/扇入：** 使用矩阵构建在不同环境中并行化测试，然后在后续作业中聚合结果。
- **工作流程编排：** 使用可重用工作流程编排涉及多个步骤和依赖项的复杂过程。
- **事件驱动工作流程：** 基于特定 GitHub 事件（例如，推送、拉取请求、问题创建）触发工作流程以自动化任务。
- **策略执行：** 实施强制执行编码标准、安全策略或其他组织指导原则的工作流程。

### 2.2 常见任务的推荐方法

- **依赖缓存：** 使用 `actions/cache` 操作缓存依赖项（例如，npm 包、Maven 工件）以加速后续工作流程运行。
- **机密管理：** 将敏感信息（例如，API 密钥、密码）存储为 GitHub Secrets，并使用 `${{ secrets.SECRET_NAME }}` 语法在工作流程中访问它们。绝不在工作流程文件中硬编码机密。
- **工件存储：** 使用 `actions/upload-artifact` 和 `actions/download-artifact` 操作存储和检索构建工件（例如，编译的二进制文件、测试报告）。
- **环境变量：** 使用环境变量配置工作流程和步骤。在工作流程、作业或步骤级别设置环境变量。
- **工作流程状态徽章：** 在仓库的 README 文件中添加工作流程状态徽章，以提供工作流程健康状况的视觉指示。

### 2.3 要避免的反模式和代码异味

- **硬编码机密：** 绝不在工作流程文件中直接硬编码机密。使用 GitHub Secrets 代替。
- **忽略错误：** 不要忽略工作流程中的错误或警告。实施适当的错误处理以确保工作流程优雅失败。
- **过于复杂的工作流程：** 避免创建难以理解和维护的过于复杂的工作流程。将它们分解为更小的可重用工作流程。
- **缺乏测试：** 不要跳过测试您的工作流程。实施单元测试、集成测试和端到端测试以确保它们正常运行。
- **不必要的依赖项：** 避免在工作流程中包含不必要的依赖项。这可能增加构建时间并引入安全漏洞。
- **直接修改 `GITHUB_PATH` 或 `GITHUB_ENV`：** 虽然这些环境变量存在，但使用推荐的步骤输出更适合与其他步骤进行更清洁、更强大的交互。

### 2.4 状态管理最佳实践

- **工件：** 使用工件在作业之间持久化文件。在一个作业结束时上传，在另一个作业开始时下载。
- **环境变量：** 在工作流程或作业级别定义环境变量以在步骤之间传递配置设置。
- **输出：** 使用步骤输出在作业内的步骤之间传递数据。
- **GitHub API：** 使用 GitHub API 存储和检索与工作流程相关的数据（例如，工作流程运行状态、部署信息）。
- **外部数据库：** 对于更复杂的状态管理需求，考虑使用外部数据库。

### 2.5 错误处理模式

- **`if: always()`：** 确保即使前一步失败，步骤也会运行，对清理或通知任务很有用。`if: always()` 应谨慎使用，因为它可能掩盖潜在问题。
- **`continue-on-error: true`：** 允许作业即使步骤失败也继续。这对非关键步骤或当您想在工作流程失败之前收集多个失败信息时很有用。
- **`try...catch...finally`（在脚本内）：** 在脚本中使用 `try...catch...finally` 块处理异常并确保适当清理。
- **通知：** 当工作流程失败或成功时发送通知（例如，电子邮件、Slack）以保持利益相关者知情。
- **工作流程重试：** 考虑使用 `retry:` 关键字自动重试失败的作业。

## 3. 性能考虑

### 3.1 优化技术

- **缓存：** 积极使用 `actions/cache` 操作缓存依赖项和中间构建工件。
- **并发：** 使用并发防止多个工作流程同时运行。
- **并行执行：** 并行运行作业以减少总执行时间。
- **优化图像：** 在将图像上传到仓库之前优化它们以减少其大小。
- **压缩代码：** 压缩 JavaScript 和 CSS 文件以减少其大小。

### 3.2 内存管理

- **资源限制：** 了解 GitHub Actions 运行器施加的资源限制。监控内存和 CPU 使用情况以防止工作流程超过这些限制。
- **垃圾回收：** 确保您的脚本和操作正确管理内存并避免内存泄漏。
- **大型数据集：** 如果您正在处理大型数据集，考虑使用流技术或将数据分割为更小的块。

### 3.3 渲染优化

- 不适用 - 通常与 GitHub Actions 工作流程本身无关，但可能适用于工作流程构建和部署的应用程序。

### 3.4 包大小优化

- 不适用 - 通常与 GitHub Actions 工作流程本身无关，但可能适用于工作流程构建和部署的应用程序。

### 3.5 延迟加载策略

- 不适用 - 通常与 GitHub Actions 工作流程本身无关，但可能适用于工作流程构建和部署的应用程序。

## 4. 安全最佳实践

### 4.1 常见漏洞及其预防方法

- **代码注入：** 通过验证所有输入并在脚本或命令中使用数据之前清理数据来防止代码注入。
- **机密暴露：** 避免在日志或错误消息中暴露机密。使用 `::add-mask::` 命令掩码机密。
- **第三方操作：** 在工作流程中使用第三方操作之前仔细审查它们。将操作固定到特定版本或提交以防止意外更改。
- **权限提升：** 以执行任务所需的最少权限运行工作流程。
- **工作流程命令注入：** 在动态构造命令时要谨慎。如果可能，使用参数或环境变量而不是连接字符串。

### 4.2 输入验证

- **验证输入：** 验证工作流程和操作的所有输入以防止处理恶意数据。
- **数据清理：** 在脚本或命令中使用数据之前清理数据以防止代码注入漏洞。
- **正则表达式：** 使用正则表达式验证输入格式。

### 4.3 身份验证和授权模式

- **GitHub 令牌：** 使用 GitHub 令牌与 GitHub API 进行身份验证。授予令牌最少必要权限。
- **服务账户：** 使用服务账户与外部服务进行身份验证。将服务账户凭据存储为 GitHub Secrets。
- **基于角色的访问控制（RBAC）：** 实施 RBAC 控制对工作流程和操作的访问。

### 4.4 数据保护策略

- **加密：** 对静态和传输中的敏感数据进行加密。
- **数据掩码：** 在日志和错误消息中掩码敏感数据。
- **数据保留：** 建立数据保留策略以确保敏感数据不会无限期存储。

### 4.5 安全的 API 通信

- **HTTPS：** 对所有 API 通信使用 HTTPS。
- **TLS：** 使用 TLS 加密保护传输中的数据。
- **API 密钥：** 保护 API 密钥和其他凭据。将它们存储为 GitHub Secrets 并在工作流程中安全使用。
- **速率限制：** 实施速率限制防止 API 滥用。

## 5. 测试方法

### 5.1 单元测试策略

- **测试可重用操作：** 单元测试您的自定义可重用操作以确保它们正常运行。
- **测试脚本：** 单元测试您的脚本以确保它们正确处理不同输入和边缘情况。
- **模拟依赖项：** 使用模拟隔离代码单元并独立测试它们。

### 5.2 集成测试

- **测试工作流程集成：** 集成测试您的工作流程以确保所有组件正确协作。
- **测试 API 集成：** 测试与外部 API 的集成以确保它们正常运行。
- **测试数据库集成：** 测试与数据库的集成以确保数据正确读写。

### 5.3 端到端测试

- **完整工作流程测试：** 运行端到端测试以验证工作流程从开始到结束正常运行。
- **模拟真实世界场景：** 模拟真实世界场景以确保工作流程能够处理不同情况。

### 5.4 测试组织

- **专用测试目录：** 为测试创建专用的 `tests/` 目录。
- **测试命名约定：** 为测试文件和函数遵循一致的命名约定。
- **测试套件：** 根据功能或组件将测试组织成测试套件。

### 5.5 模拟和存根

- **模拟外部服务：** 模拟外部服务以将测试与外部依赖项隔离。
- **存根函数：** 存根函数以在测试期间控制依赖项的行为。
- **模拟 GitHub API：** 模拟 GitHub API 以测试工作流程而不进行真实 API 调用。

## 6. 常见陷阱和注意事项

### 6.1 开发人员常犯的错误

- **错误语法：** YAML 语法可能很棘手。使用检查器或验证器捕获语法错误。
- **错误缩进：** 缩进在 YAML 中至关重要。在工作流程文件中使用一致的缩进。
- **缺少权限：** 授予工作流程访问资源（例如，仓库内容、机密）的必要权限。
- **机密中的拼写错误：** 仔细检查机密名称以避免拼写错误。
- **不固定操作版本：** 始终将操作固定到特定版本或提交以防止意外更改。

### 6.2 需要注意的边缘情况

- **速率限制：** 了解 GitHub API 速率限制。实施重试逻辑处理速率限制错误。
- **并发工作流程运行：** 优雅处理并发工作流程运行以避免冲突。
- **网络问题：** 实施错误处理以处理网络问题和瞬态错误。
- **大文件大小：** 了解 GitHub Actions 支持的最大文件大小。

### 6.3 版本特定问题

- **操作兼容性：** 确保您的操作与您使用的 GitHub Actions 版本兼容。
- **运行器镜像：** 了解运行器镜像的更改并相应更新工作流程。

### 6.4 兼容性问题

- **跨平台兼容性：** 确保工作流程与不同操作系统（例如，Linux、Windows、macOS）兼容。
- **浏览器兼容性：** 如果工作流程涉及 Web 应用程序，在不同浏览器中测试它们。

### 6.5 调试策略

- **工作流程日志：** 检查工作流程日志以识别错误和警告。
- **调试操作：** 使用调试操作检查工作流程状态。
- **逐步调试：** 插入 `echo` 语句或调试操作逐步跟踪工作流程执行。
- **本地测试：** 使用 `act` 等工具在推送到 GitHub 之前本地测试工作流程。

## 7. 工具和环境

### 7.1 推荐的开发工具

- **带 GitHub Actions 扩展的 VS Code：** 使用带 GitHub Actions 扩展的 VS Code 进行语法高亮、代码完成和验证。
- **GitHub CLI：** 使用 GitHub CLI 从工作流程与 GitHub API 交互。
- **`act`：** 使用 `act` 本地测试工作流程。
- **YAML 检查器：** 使用 YAML 检查器捕获工作流程文件中的语法错误。

### 7.2 构建配置

- **`.github/workflows/`：** 将所有工作流程文件放在此目录中。
- **`action.yml`：** 对于可重用操作，在此文件中定义其元数据。

### 7.3 代码检查和格式化

- **YAML Lint：** 使用 YAML 检查工具强制执行一致格式并捕获语法错误。
- **Shellcheck：** 使用 Shellcheck 检查 shell 脚本。
- **Prettier：** 使用 Prettier 格式化 JavaScript 和 CSS 文件。

### 7.4 部署最佳实践

- **环境变量：** 使用环境变量配置部署。
- **部署策略：** 使用适当的部署策略（例如，蓝/绿部署、金丝雀部署）最小化停机时间。
- **回滚策略：** 实施回滚策略以在部署失败时恢复到先前版本。

### 7.5 CI/CD 集成

- **持续集成（CI）：** 在每次提交时运行自动化测试以确保代码质量。
- **持续交付（CD）：** 自动化部署过程以快速向用户交付新功能和错误修复。
- **自动化发布：** 自动化发布过程以自动创建和发布版本。

## 结论

通过遵循这些最佳实践和编码标准，您可以创建高效、可靠、安全和可维护的 GitHub Actions 工作流程。记住根据您的特定需求和上下文调整这些指导原则。持续审查和改进您的工作流程以确保它们满足您不断发展的需求。
