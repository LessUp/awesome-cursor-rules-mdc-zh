---
description: 本规范为 ESLint 提供全面的指导原则，涵盖代码组织、常见模式、性能、安全、测试和工具，确保高质量、可维护的 JavaScript/TypeScript 代码。
globs: "*.js,*.jsx,*.ts,*.tsx,*.vue"
---
# ESLint 最佳实践：代码质量保证指南

通过遵循这些最佳实践，您可以确保 JavaScript/TypeScript 代码的清洁、一致和可维护性，减少错误风险并提高整体代码质量。

## 1. 基本配置

### 1.1 安装和初始化

```bash
# 安装 ESLint
npm install eslint --save-dev

# 初始化配置
npx eslint --init
```

### 1.2 配置文件结构

```javascript
// .eslintrc.js
module.exports = {
  env: {
    browser: true,
    es2021: true,
    node: true,
  },
  extends: [
    'eslint:recommended',
    '@typescript-eslint/recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: 'module',
  },
  plugins: [
    'react',
    '@typescript-eslint',
    'react-hooks',
  ],
  rules: {
    // 自定义规则
  },
};
```

## 2. 核心规则配置

### 2.1 代码风格规则

```javascript
rules: {
  // 缩进
  'indent': ['error', 2],
  
  // 引号
  'quotes': ['error', 'single'],
  
  // 分号
  'semi': ['error', 'always'],
  
  // 尾随逗号
  'comma-dangle': ['error', 'always-multiline'],
  
  // 对象花括号间距
  'object-curly-spacing': ['error', 'always'],
  
  // 数组方括号间距
  'array-bracket-spacing': ['error', 'never'],
}
```

### 2.2 最佳实践规则

```javascript
rules: {
  // 禁用 console
  'no-console': 'warn',
  
  // 禁用 debugger
  'no-debugger': 'error',
  
  // 禁用未使用的变量
  'no-unused-vars': 'error',
  
  // 要求使用 === 和 !==
  'eqeqeq': 'error',
  
  // 禁用 var
  'no-var': 'error',
  
  // 优先使用 const
  'prefer-const': 'error',
}
```

### 2.3 TypeScript 特定规则

```javascript
rules: {
  // TypeScript 规则
  '@typescript-eslint/no-unused-vars': 'error',
  '@typescript-eslint/explicit-function-return-type': 'warn',
  '@typescript-eslint/no-explicit-any': 'warn',
  '@typescript-eslint/prefer-interface': 'off',
  '@typescript-eslint/explicit-module-boundary-types': 'off',
}
```

## 3. 项目集成

### 3.1 与编辑器集成

#### VS Code 配置
```json
// .vscode/settings.json
{
  "eslint.enable": true,
  "eslint.autoFixOnSave": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ]
}
```

### 3.2 与构建工具集成

#### Webpack 集成
```javascript
// webpack.config.js
module.exports = {
  module: {
    rules: [
      {
        test: /\.(js|jsx|ts|tsx)$/,
        exclude: /node_modules/,
        use: [
          'babel-loader',
          'eslint-loader',
        ],
      },
    ],
  },
};
```

#### Vite 集成
```javascript
// vite.config.js
import { defineConfig } from 'vite';
import eslint from 'vite-plugin-eslint';

export default defineConfig({
  plugins: [
    eslint({
      include: ['src/**/*.js', 'src/**/*.jsx', 'src/**/*.ts', 'src/**/*.tsx'],
    }),
  ],
});
```

### 3.3 Git Hooks 集成

```json
// package.json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "git add"
    ]
  }
}
```

## 4. 高级配置

### 4.1 自定义规则

```javascript
// 创建自定义规则
rules: {
  // 禁止在生产环境使用 console.log
  'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'warn',
  
  // 自定义命名约定
  'camelcase': ['error', { properties: 'never' }],
  
  // 限制函数复杂度
  'complexity': ['warn', 10],
  
  // 限制函数长度
  'max-lines-per-function': ['warn', 50],
}
```

### 4.2 环境特定配置

```javascript
// .eslintrc.js
module.exports = {
  env: {
    browser: true,
    node: true,
    jest: true,
    es6: true,
  },
  overrides: [
    {
      files: ['**/*.test.js', '**/*.spec.js'],
      env: {
        jest: true,
      },
      rules: {
        'no-console': 'off',
      },
    },
  ],
};
```

### 4.3 忽略文件配置

```bash
# .eslintignore
node_modules/
dist/
build/
coverage/
*.min.js
public/
```

## 5. 团队协作

### 5.1 共享配置

```javascript
// 创建可共享的配置包
// eslint-config-company/index.js
module.exports = {
  extends: [
    'eslint:recommended',
    '@typescript-eslint/recommended',
  ],
  rules: {
    // 公司标准规则
  },
};
```

### 5.2 配置继承

```javascript
// .eslintrc.js
module.exports = {
  extends: [
    'eslint-config-company',
    'eslint-config-company/react',
  ],
  rules: {
    // 项目特定规则覆盖
  },
};
```

## 6. 性能优化

### 6.1 缓存配置

```bash
# 启用缓存
eslint --cache --cache-location .eslintcache src/
```

### 6.2 并行处理

```json
// package.json
{
  "scripts": {
    "lint": "eslint --ext .js,.jsx,.ts,.tsx src/ --max-warnings 0",
    "lint:fix": "eslint --ext .js,.jsx,.ts,.tsx src/ --fix",
    "lint:cache": "eslint --cache --ext .js,.jsx,.ts,.tsx src/"
  }
}
```

## 7. 常见问题和解决方案

### 7.1 规则冲突

```javascript
// 解决 Prettier 和 ESLint 冲突
{
  "extends": [
    "eslint:recommended",
    "prettier" // 必须放在最后
  ]
}
```

### 7.2 性能问题

```javascript
// 优化大型项目的 ESLint 性能
{
  "parserOptions": {
    "project": "./tsconfig.json",
    "tsconfigRootDir": __dirname,
  },
  // 只检查必要的文件
  "ignorePatterns": ["dist/", "node_modules/", "*.config.js"]
}
```

## 8. 最佳实践总结

### 8.1 配置原则
- **渐进式采用**：从基础规则开始，逐步增加严格性
- **团队一致性**：确保团队成员使用相同的配置
- **自动化修复**：尽可能使用自动修复功能

### 8.2 维护建议
- **定期更新**：保持 ESLint 和插件的最新版本
- **规则审查**：定期审查和调整规则配置
- **文档记录**：为自定义规则编写清晰的文档

### 8.3 集成建议
- **CI/CD 集成**：在持续集成中运行 ESLint 检查
- **编辑器集成**：配置编辑器实时显示 ESLint 错误
- **Git Hooks**：在提交前自动运行 ESLint 检查

通过遵循这些 ESLint 最佳实践，您可以显著提高代码质量，减少错误，并确保团队代码的一致性和可维护性。
