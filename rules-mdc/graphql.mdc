---
description: 此规则为 GraphQL 开发提供全面的最佳实践和编码标准，涵盖代码组织、性能、安全、测试和常见陷阱。
globs: "*.graphql"
---
- **命名约定**：
  - 为字段名、参数名和指令名使用 `camelCase`。这是一个被广泛接受的约定，可以增强可读性和一致性。
  - 在命名输入类型时使用 `Input` 后缀（例如，`UserInput`）。这清楚地将输入类型与模式中的其他类型区分开来。
  - 避免在字段名中使用动词前缀如 `get`（例如，使用 `users` 而不是 `getUsers`）。这保持了模式的清晰性和一致性。

- **模式设计和查询优化**：
  - 设计模式以防止数据的过度获取或获取不足。使用片段仅请求必要的数据。
  - 为参数使用变量而不是硬编码值。这增强了灵活性和可维护性，并允许查询缓存。
  - 为大型数据集实施分页以避免压垮客户端并提高性能。
  - 使用字段别名重命名响应中的字段，这对向后兼容性或简化客户端代码很有用。

- **代码组织和结构**：
  - **目录结构**：将 GraphQL 模式文件组织成逻辑目录结构。考虑将相关类型和解析器分组在一起（例如，`schemas/user/`、`resolvers/user/`）。
  - **文件命名约定**：为模式文件使用描述性名称（例如，`user.graphql`、`product.graphql`）。
  - **模块组织**：将模式分解为更小、可重用的模块。使用模式拼接或联邦将这些模块组合成单个 API。
  - **组件架构**：如果使用 Apollo Client 或 Relay 等 GraphQL 客户端库，构建组件以高效管理 GraphQL 查询和数据获取。

- **常见模式和反模式**：
  - **设计模式**：考虑使用外观模式简化复杂解析器或 DataLoader 模式批处理和缓存数据获取等模式。
  - **反模式**：避免创建在单个请求中获取过多数据的过于复杂的查询。还要避免使用深度嵌套的解析器，因为这可能导致性能问题。
  - **状态管理**：选择与 GraphQL 客户端库良好集成的状态管理解决方案。考虑使用 Apollo Client 的缓存或 Relay 的存储进行客户端数据管理。
  - **错误处理**：在解析器中实施强大的错误处理。返回用户友好的错误消息并在服务器上记录详细的错误信息。

- **性能考虑**：
  - **优化技术**：使用查询批处理、缓存和持久化查询等技术优化性能。
  - **内存管理**：在解析器中注意内存使用，特别是在处理大型数据集时。
  - **延迟加载**：为非关键数据实施延迟加载以改善初始页面加载时间。

- **安全最佳实践**：
  - **输入验证**：验证所有用户输入以防止注入攻击和其他安全漏洞。在模式中使用适当的数据类型和约束。
  - **身份验证和授权**：实施强大的身份验证和授权机制保护 API。使用基于角色的访问控制（RBAC）限制对敏感数据的访问。
  - **数据保护**：通过在静态和传输中加密敏感数据来保护它。使用 HTTPS 保护 API 通信。
  - **速率限制**：实施速率限制以防止拒绝服务（DoS）攻击。
  - **查询复杂度分析**：限制 GraphQL 查询的复杂度以防止恶意用户使服务器过载。`graphql-cost-analysis` 等工具可以提供帮助。

- **测试方法**：
  - **单元测试**：为解析器编写单元测试以确保它们正常运行。
  - **集成测试**：编写集成测试验证 GraphQL API 与数据源和其他服务正确集成。
  - **端到端测试**：编写端到端测试模拟用户与 API 的交互并验证整个系统按预期工作。
  - **测试组织**：将测试组织成逻辑目录结构。为测试文件使用清晰和描述性的名称。
  - **模拟和存根**：使用模拟和存根在测试期间将解析器与外部依赖项隔离。

- **常见陷阱和注意事项**：
  - **N+1 问题**：注意 N+1 问题，其中获取项目列表需要 N 个额外查询来获取相关数据。使用 DataLoader 批处理和缓存这些查询。
  - **循环依赖**：避免模式类型之间的循环依赖，因为这可能导致错误。

- **工具和环境**：
  - **推荐的开发工具**：使用 GraphQL Playground 或 GraphiQL 等工具探索和测试 API。考虑使用 Apollo Studio 或 Altair GraphQL Client 等 GraphQL IDE 获得高级功能。
  - **代码检查和格式化**：使用 GraphQL 代码检查器和格式化器强制执行代码风格并防止错误。考虑使用带有 `eslint-plugin-graphql` 插件的 ESLint。
  - **部署最佳实践**：在 CDN 后面部署 GraphQL API 以提高性能和可用性。使用 GraphQL 网关管理身份验证、授权和速率限制。
  - **CI/CD 集成**：将 GraphQL API 集成到 CI/CD 管道中以自动化测试和部署。
