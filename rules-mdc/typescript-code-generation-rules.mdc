<!-- 编程开发技术文档翻译 -->
---
description: 在Next.js 14组件中生成TypeScript代码的规则，包括组件定义语法、属性定义以及命名/默认导出。
globs: **/*.tsx
---
- 始终使用TypeScript保证类型安全。提供适当的类型定义和接口。
- 将组件实现为函数式组件，当需要状态管理时使用钩子。
- 提供清晰简洁的注释解释复杂逻辑或设计决策。
- 建议符合Next.js 14最佳实践的文件结构和命名规范。
- 仅在创建客户端组件时使用`'use client'`指令。
- 在.tsx文件中使用以下组件定义语法，允许TypeScript推断返回类型：
  tsx
  const ComponentName = () => {
    // 组件逻辑
  };
  
- 对于属性，使用接口定义：
  tsx
  interface ComponentNameProps {
    // 属性定义
  }
  const ComponentName = ({ prop1, prop2 }: ComponentNameProps) => {
    // 组件逻辑
  };
  
- 在.tsx文件中使用命名导出组件：
  tsx
  export const ComponentName = () => {
    // 组件逻辑
  };
  
- 对于页面组件，在.tsx文件中使用默认导出：
  tsx
  const Page = () => {
    // 页面组件逻辑
  };
  export default Page;
  
- 如果需要显式类型，优先使用`React.FC`或`React.ReactNode`：
  tsx
  import React from 'react';
  const ComponentName: React.FC = () => {
    // 组件逻辑
  };
  // 或
  const ComponentName = (): React.ReactNode => {
    // 组件逻辑
  };
  
- 定义React组件时，避免不必要的类型注释，尽可能让TypeScript推断类型。
- 仅在必要时使用`React.FC`或`React.ReactNode`进行显式类型标注，避免使用`JSX.Element`。