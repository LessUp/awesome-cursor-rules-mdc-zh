---
description: 此规则提供使用 Redis 的最佳实践，涵盖代码组织、性能、安全、测试和常见陷阱，以确保高效可靠的使用。适用于与 Redis 交互的任何语言文件。
globs: "*.py,*.js,*.go,*.java,*.c,*.cpp,*.rb,*.php,*.ts,*.rs,*.kt,*.scala"
---
- **通用最佳实践**
  - 遵循官方 Redis 文档和社区最佳实践。
  - 为您的语言使用最新稳定版本的 Redis 客户端库。
  - 定期更新 Redis 服务器和客户端库以受益于错误修复、性能改进和安全补丁。

- **连接管理**
  - **连接池：** 使用连接池减少为每个操作创建新连接的开销。这显著提高性能，特别是在高流量场景中。
  - **连接超时：** 配置适当的连接超时以防止在网络问题情况下无限期阻塞。
  - **重试逻辑：** 为瞬态连接错误实施带有指数退避的重试逻辑。
  - **安全连接：** 连接到远程 Redis 实例时，始终使用 TLS/SSL 加密（redis+ssl://）保护传输中的数据，特别是处理敏感信息时。确保正确的证书验证。

- **数据建模和序列化**
  - **键命名：** 使用一致且有意义的键命名约定。考虑使用命名空间或前缀组织键并避免冲突。
  - **数据序列化：** 选择高效的序列化格式（例如，JSON、Protocol Buffers、MessagePack）并一致使用。考虑人类可读性、存储空间和序列化/反序列化性能之间的权衡。
  - **较小的值：** Redis 在较小值下工作最佳。将较大的数据结构分解为较小的块并分布在多个键上。这改善内存利用率和性能。
  - **数据类型：** 有效利用 Redis 的丰富数据类型（字符串、列表、集合、有序集合、哈希、流）优化数据存储和操作。选择最适合用例的数据类型。

- **命令使用**
  - **事务：** 使用事务（`MULTI`、`EXEC`、`DISCARD`、`WATCH`）在执行多个操作时确保原子性。注意 Redis 事务的限制（单个命令失败时无回滚）。
  - **管道：** 使用管道将多个命令批处理在一起并减少网络往返时间。这显著提高批量操作的性能。
  - **Lua 脚本：** 对需要原子性和服务器端处理的复杂操作使用 Lua 脚本。与执行多个单独命令相比，这减少网络流量并提高性能。
  - **避免阻塞命令：** 在生产环境中避免使用像 `KEYS`、`FLUSHALL`、`FLUSHDB`、不带 `LIMIT` 的 `SORT` 等阻塞命令。这些命令可能阻塞 Redis 服务器并降低性能。
  - **使用 SCAN：** 使用 `SCAN` 命令而不是 `KEYS` 以非阻塞方式迭代键。这允许 Redis 服务器在迭代时继续服务其他请求。
  - **高效删除：** 使用 `SCAN` 与 `DEL` 批量删除键，而不是 `FLUSHALL` 或 `FLUSHDB`，最小化对服务器的干扰。
  - **TTL 管理：** 为键设置适当的生存时间（TTL）值以自动过期不再需要的数据。这有助于管理内存使用并防止数据变得陈旧。

- **内存管理**
  - **Maxmemory：** 配置 `maxmemory` 指令限制 Redis 可以使用的内存量。达到限制时，Redis 将根据配置的驱逐策略驱逐键。
  - **驱逐策略：** 根据应用程序需求选择适当的驱逐策略（例如，`LRU`、`LFU`、`volatile-ttl`）。理解不同驱逐策略之间的权衡。
  - **内存碎片：** 监控内存碎片并考虑定期重启 Redis 以整理内存。`INFO memory` 命令提供有关内存使用和碎片的信息。

- **性能监控和调优**
  - **Redis Monitor：** 使用 `MONITOR` 命令（在生产中谨慎使用）观察服务器上实时执行的命令。这可以帮助识别性能瓶颈。
  - **Redis 慢日志：** 配置 Redis 慢日志记录执行时间超过指定时间的命令。分析慢日志以识别性能问题。
  - **INFO 命令：** 使用 `INFO` 命令收集有关 Redis 服务器的信息，包括内存使用、CPU 使用和客户端连接。此信息可用于监控性能和识别潜在问题。
  - **延迟监控：** 使用 `redis-cli --latency` 等工具或专用监控解决方案监控 Redis 延迟。高延迟可能表示性能问题。

- **安全考虑**
  - **身份验证：** 使用 `requirepass` 指令启用身份验证以保护 Redis 服务器免受未授权访问。使用强密码。
  - **访问控制列表（ACL）：** 使用 ACL 限制不同用户对特定命令和键的访问。这提供对 Redis 数据访问的细粒度控制。
  - **网络安全：** 使用防火墙或其他网络安全措施限制对 Redis 服务器的网络访问。仅允许来自受信任来源的连接。
  - **禁用不安全命令：** 使用 `rename-command` 指令禁用或重命名潜在危险命令，如 `FLUSHALL`、`FLUSHDB`、`KEYS`、`EVAL`。这减少意外或恶意误用的风险。
  - **定期审计：** 定期对 Redis 配置和使用模式进行安全审计，以识别和解决潜在漏洞。
  - **输入验证：** 始终验证和清理存储在 Redis 中的任何数据以防止注入攻击。

- **测试策略**
  - **单元测试：** 编写单元测试验证与 Redis 交互的代码功能。使用模拟或存根将 Redis 交互与其余代码隔离。
  - **集成测试：** 编写集成测试验证代码与 Redis 服务器之间的交互。为集成测试使用专用的测试 Redis 实例。
  - **端到端测试：** 编写端到端测试验证整个应用程序流程，包括与 Redis 的交互。这确保应用程序在现实环境中正确工作。
  - **数据填充：** 测试时，考虑用代表性数据集填充 Redis 数据库。
  - **测试组织：** 逻辑地组织测试，将单元测试、集成测试和端到端测试分离到不同的目录或模块中。
  - **模拟和存根：** 使用模拟和存根框架在单元测试期间模拟 Redis 行为。

- **代码组织和结构**
  - **专用模块：** 创建专用模块或类封装所有 Redis 相关操作。这促进代码重用和可维护性。
  - **配置管理：** 将 Redis 连接参数（主机、端口、密码）存储在配置文件或环境变量中。这使得在不修改代码的情况下更改 Redis 配置变得容易。
  - **抽象层：** 考虑在 Redis 客户端库之上创建抽象层，为应用程序提供更高级的 API。这可以提高代码可读性并使将来切换到不同的 Redis 客户端库变得更容易。

- **常见陷阱和注意事项**
  - **N+1 问题：** 从 Redis 检索数据时避免 N+1 问题。使用管道或 Lua 脚本在单个请求中检索数据，而不是进行多个单独请求。
  - **竞态条件：** 在 Redis 中更新数据时注意潜在的竞态条件。使用事务或 Lua 脚本确保原子性。
  - **大值：** 避免在 Redis 中存储极大的值。这可能导致性能问题和内存耗尽。
  - **键过期：** 使用键过期（TTL）时要小心。如果键意外过期，可能导致数据丢失或不一致的应用程序行为。
  - **事件循环中的阻塞操作：** 不要在事件循环或 GUI 线程中直接执行阻塞的 Redis 操作。使用异步操作避免阻塞主线程。

- **工具和环境**
  - **Redis CLI：** 使用 Redis CLI（`redis-cli`）与 Redis 服务器交互、执行命令和监控性能。
  - **Redis 桌面管理器：** 使用 Redis 桌面管理器（例如，RedisInsight、Medis）可视化数据、管理键和监控 Redis 服务器。
  - **代码检查和格式化：** 配置代码检查器和格式化器在 Redis 相关代码中强制执行一致的代码风格和最佳实践。
  - **CI/CD 集成：** 将 Redis 测试和部署集成到 CI/CD 管道中以自动化测试和部署过程。
  - **监控工具：** 利用 Prometheus、Grafana 或 Datadog 等监控工具在生产环境中监控 Redis 性能和健康状况。
