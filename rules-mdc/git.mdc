---
description: 此规则概述了有效使用 Git 的最佳实践，包括代码组织、提交策略、分支模型和协作工作流程。
globs: "**/.git/*"
---
- **提交策略：**
  - **原子提交：** 保持提交小而专注。每个提交应该解决单一的逻辑变更。这使得理解历史记录和在需要时回滚变更变得更容易。
  - **描述性提交消息：** 编写清晰、简洁和信息丰富的提交消息。解释变更背后的*原因*，而不仅仅是*什么*被改变了。使用一致的格式（例如，祈使语气："修复错误"、"添加功能"）。
  - **频繁提交：** 尽早且经常提交。这有助于避免丢失工作并使跟踪进度变得更容易。
  - **避免提交损坏的代码：** 在提交之前确保您的代码能够编译并通过基本测试。
  - **签名您的提交（可选但推荐）：** 使用 GPG 签名验证您提交的真实性。

- **分支模型：**
  - **使用功能分支：** 为每个新功能或错误修复创建分支。这隔离了变更并允许更容易的代码审查。
  - **Gitflow 或类似模型：** 考虑采用像 Gitflow 这样的分支模型来管理发布、热修复和功能开发。
  - **短期分支：** 保持分支短期存在。分支存在的时间越长，合并就越困难。
  - **定期变基或合并：** 通过定期变基或合并保持您的功能分支与主分支（例如，`main`、`develop`）同步。
  - **避免直接提交到主分支：** 保护您的主分支免受直接提交。对所有变更使用拉取请求。

- **代码组织：**
  - **一致的格式：** 使用一致的编码风格指南（例如，Python 的 PEP 8，其他语言的 Google 风格指南）并使用代码检查器和格式化器（例如，`flake8`、`pylint`、`prettier`）强制执行。
  - **模块化代码：** 将您的代码库分解为更小、可管理的模块或组件。这提高了可读性、可维护性和可测试性。
  - **明确定义的接口：** 在模块和组件之间定义清晰的接口以促进松耦合。
  - **避免全局状态：** 最小化全局变量和状态的使用以减少复杂性和潜在冲突。
  - **文档：** 用注释和文档字符串记录您的代码。解释函数、类和模块的目的。

- **协作和代码审查：**
  - **拉取请求：** 对所有代码变更使用拉取请求。这提供了代码审查和讨论的机会。
  - **代码审查检查清单：** 创建代码审查检查清单以确保一致性和彻底性。
  - **建设性反馈：** 在代码审查期间提供建设性反馈。专注于改进代码，而不是批评作者。
  - **处理反馈：** 及时响应和处理代码审查的反馈。
  - **结对编程：** 对复杂或关键任务考虑结对编程。

- **忽略文件和目录：**
  - **.gitignore：** 使用 `.gitignore` 文件排除不应被 Git 跟踪的文件和目录（例如，构建产物、临时文件、机密）。
  - **全局 .gitignore：** 配置全局 `.gitignore` 文件以排除您在任何 Git 存储库中都不想跟踪的文件。

- **处理机密和敏感信息：**
  - **永远不要提交机密：** 永远不要将机密、密码、API 密钥或其他敏感信息提交到您的 Git 存储库。
  - **环境变量：** 将机密存储在环境变量中并在运行时访问它们。
  - **机密管理工具：** 使用像 HashiCorp Vault 或 AWS Secrets Manager 这样的机密管理工具安全地存储和管理机密。
  - **git-secret 或类似工具：** 如果机密必须存在于存储库中（强烈不建议），请加密它们。

- **子模块和子树：**
  - **谨慎使用：** 谨慎使用 Git 子模块和子树，因为它们会增加复杂性。
  - **理解影响：** 在采用子模块和子树之前理解使用它们的影响。
  - **考虑替代方案：** 考虑子模块和子树的替代方案，如包管理器或构建系统。

- **大文件存储（LFS）：**
  - **用于大文件：** 使用 Git LFS 存储大文件（例如，图像、视频、音频文件）。这防止您的存储库变得臃肿。
  - **配置 LFS：** 正确配置 Git LFS 以跟踪存储库中的大文件。

- **回滚和重置：**
  - **理解差异：** 在使用 `git revert`、`git reset` 和 `git checkout` 之前理解它们之间的差异。
  - **谨慎使用：** 谨慎使用 `git reset` 和 `git checkout`，因为它们可能会丢失数据。
  - **回滚公共提交：** 使用 `git revert` 撤销已经推送到公共存储库的变更。这创建一个新的提交来逆转变更。

- **标记发布：**
  - **创建标签：** 创建标签来标记重要的发布或里程碑。
  - **语义版本控制：** 在标记发布时遵循语义版本控制（SemVer）。
  - **注释标签：** 使用注释标签提供关于发布的额外信息。

- **处理合并冲突：**
  - **理解冲突：** 在尝试解决合并冲突之前理解冲突的来源。
  - **与他人沟通：** 与可能受冲突影响的其他开发人员沟通。
  - **使用合并工具：** 使用合并工具帮助解决冲突。
  - **解决后测试：** 在解决冲突后彻底测试您的代码。

- **存储库维护：**
  - **定期清理：** 通过删除未使用的分支和标签定期清理您的 Git 存储库。
  - **优化存储库：** 使用 `git gc` 优化存储库以提高性能。

- **CI/CD 集成：**
  - **自动化测试：** 将 Git 与 CI/CD 系统集成以自动化测试和部署。
  - **在每次提交时运行测试：** 在每次提交时运行测试以确保代码质量。

- **常见陷阱和注意事项：**
  - **意外提交：** 意外提交敏感信息或大文件。
  - **合并冲突：** 解决合并冲突的困难。
  - **丢失工作：** 由于错误使用 `git reset` 或 `git checkout` 而丢失工作。
  - **忽略 .gitignore：** 忘记将文件添加到 `.gitignore`。

- **工具和环境：**
  - **Git 客户端：** 使用适合您需求的 Git 客户端（例如，命令行、GUI）。
  - **IDE 集成：** 在您的 IDE 中使用 Git 集成以简化工作流程。
  - **在线存储库：** 使用可靠的在线 Git 存储库托管服务（例如，GitHub、GitLab、Bitbucket）。
