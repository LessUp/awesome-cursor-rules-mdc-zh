---
description: 使用 MongoDB 开发的综合最佳实践，涵盖模式设计、代码组织、性能优化、安全考虑和测试策略。此规则提供可操作的指导，帮助开发人员构建强大且可扩展的 MongoDB 应用程序。
globs: "*.js,*.ts,*.mongodb"
---
- **理解关系型数据库和文档型数据库之间的模式差异：** 认识到 MongoDB 的文档导向模型与关系型数据库有显著差异。设计反映数据本身关系的模式，而不是依赖连接。
- **嵌入数据而不是依赖连接：** 优先在单个文档中嵌入相关数据，以最小化对昂贵连接操作的需求。这种方法可以显著提高读取性能。
- **为频繁操作使用索引：** 在经常查询的字段上创建索引以优化性能。仔细考虑应用程序将执行的查询类型并相应地创建索引。复合索引对涉及多个字段的查询有益。
- **正确调整服务器大小：** 确保 MongoDB 服务器资源充分满足工作负载需求。监控资源利用率并根据需要扩展以保持最佳性能。考虑 CPU、内存和磁盘 I/O。
- **使用复制或分片：** 实施复制或分片以增强可扩展性和可靠性。复制提供数据冗余和高可用性，而分片将数据分布在多个服务器上以处理更大的数据集和更高的流量。

### 1. 代码组织和结构：

- **目录结构最佳实践：**
    - `config/`：包含数据库连接、身份验证和其他设置的配置文件。
    - `models/`：使用 Mongoose 或其他 ODM 库定义数据模型。每个模型代表一个 MongoDB 集合。
    - `routes/`：处理与数据库交互的 API 端点和路由。
    - `controllers/`：实现处理请求、与模型交互和返回响应的逻辑。
    - `services/`：包含与数据访问和操作相关的可重用业务逻辑。
    - `utils/`：提供验证、格式化和错误处理等常见任务的实用函数。
    - `tests/`：包括单元测试、集成测试和端到端测试。
- **文件命名约定：**
    - 使用反映文件目的的描述性名称（例如，`user.model.js`、`auth.controller.ts`、`product.service.js`）。
    - 在整个项目中遵循一致的命名约定（例如，camelCase 或 snake_case）。
- **模块组织：**
    - 根据功能或领域将代码组织成模块（例如，`user` 模块、`product` 模块）。
    - 使用 ES 模块或 CommonJS 模块封装代码并管理依赖关系。
- **组件架构：**
    - 为数据验证、错误处理和身份验证等常见任务设计可重用组件。
    - 遵循关注点分离和单一职责原则。
- **代码分割策略：**
    - 实施模块或组件的延迟加载以改善初始加载时间。
    - 使用代码分割将大型包分解为更小的块。

### 2. 常见模式和反模式：

- **MongoDB 特定的设计模式：**
    - **嵌入文档模式：** 在单个文档中嵌入相关数据以最小化对连接的需求。
    - **多态模式：** 使用通用基础模式和判别字段在同一集合中存储不同类型的文档。
    - **桶模式：** 根据时间或其他标准将数据分组到桶中，以实现高效查询和聚合。
- **常见任务的推荐方法：**
    - 使用 Mongoose 或其他 ODM 库简化数据建模和验证。
    - 为大型结果集实施分页。
    - 使用聚合管道进行复杂查询和数据转换。
- **要避免的反模式和代码异味：**
    - **过度索引：** 创建太多索引会降低写入性能。
    - **忽略性能：** 忽视分析查询性能可能导致响应时间缓慢。
    - **模式违规：** 允许不一致的数据存储在集合中可能导致意外错误。
- **状态管理最佳实践：**
    - 使用 Redux 或 Zustand 等状态管理库管理应用程序状态。
    - 将状态存储在集中式存储中以确保一致性和可预测性。
- **错误处理模式：**
    - 实施强大的错误处理以优雅地捕获和处理异常。
    - 使用 try-catch 块处理潜在错误。
    - 记录错误以进行调试和监控。

### 3. 性能考虑：

- **优化技术：**
    - 使用索引优化查询性能。
    - 避免使用 `$where` 操作符，因为它可能很慢。
    - 使用投影仅检索必要的字段。
- **内存管理：**
    - 监控内存使用情况并识别潜在的内存泄漏。
    - 使用连接池重用数据库连接。
- **渲染优化：**（如果适用于使用 MongoDB 数据的基于 UI 的应用程序）
    - 为大型列表实施虚拟化。
    - 使用记忆化避免不必要的重新渲染。
- **包大小优化：**（如果适用）
    - 压缩和压缩 JavaScript 和 CSS 文件。
    - 删除未使用的代码。
- **延迟加载策略：**（如果适用）
    - 延迟加载图像和其他资源。
    - 使用代码分割按需加载模块。

### 4. 安全最佳实践：

- **常见漏洞及其预防方法：**
    - **NoSQL 注入：** 清理用户输入以防止注入攻击。
    - **身份验证绕过：** 实施强大的身份验证和授权机制。
    - **数据暴露：** 通过加密和控制访问保护敏感数据。
- **输入验证：**
    - 验证所有用户输入以防止恶意数据存储在数据库中。
    - 使用 Joi 或 Yup 等验证库定义验证模式。
- **身份验证和授权模式：**
    - 使用 OAuth 2.0 或 JWT 等安全身份验证协议。
    - 实施基于角色的访问控制（RBAC）以限制对敏感数据和功能的访问。
- **数据保护策略：**
    - 对静态和传输中的敏感数据进行加密。
    - 使用数据掩码保护个人身份信息（PII）。
- **安全 API 通信：**
    - 使用 HTTPS 加密客户端和服务器之间的通信。
    - 实施速率限制以防止滥用。

### 5. 测试方法：

- **单元测试策略：**
    - 编写单元测试验证单个模块和组件的功能。
    - 使用 Jest 或 Mocha 等测试框架。
- **集成测试：**
    - 编写集成测试验证不同模块和组件之间的交互。
    - 测试应用程序与数据库之间的集成。
- **端到端测试：**
    - 编写端到端测试验证整个应用程序的功能。
    - 使用 Cypress 或 Playwright 等测试框架。
- **测试组织：**
    - 根据功能或模块将测试组织到单独的目录中。
    - 为测试文件和测试用例使用描述性名称。
- **模拟和存根：**
    - 使用模拟和存根在测试期间隔离代码单元。
    - 使用 Sinon 或 Jest 内置模拟等模拟库。

### 6. 常见陷阱和注意事项：

- **开发人员常犯的错误：**
    - **不理解 MongoDB 的查询语言：** 未能掌握 MongoDB 查询语言的细微差别可能导致低效查询。
    - **忽略索引：** 忽视在经常查询的字段上创建索引会显著影响性能。
    - **不正确处理错误：** 未能优雅地处理错误可能导致意外的应用程序行为。
- **需要注意的边缘情况：**
    - **数据类型不匹配：** 确保数据类型在应用程序和数据库之间保持一致。
    - **并发问题：** 小心处理并发问题以防止数据损坏。
- **版本特定问题：**
    - 注意不同版本的 MongoDB 和相关库之间的兼容性问题。
    - 查阅您使用的特定版本的文档。
- **兼容性问题：**
    - 确保应用程序与不同操作系统和浏览器兼容。
    - 在不同设备和屏幕尺寸上测试应用程序。
- **调试策略：**
    - 使用日志记录跟踪执行流程并识别潜在问题。
    - 使用调试器逐步执行代码并检查变量。

### 7. 工具和环境：

- **推荐的开发工具：**
    - **MongoDB Compass：** 用于探索和管理 MongoDB 数据库的 GUI 工具。
    - **MongoDB Shell：** 与 MongoDB 交互的命令行界面。
    - **VS Code MongoDB 扩展：** 为 MongoDB 开发提供语法高亮、代码补全和其他功能。
- **构建配置：**
    - 使用 Webpack 或 Parcel 等构建工具打包和优化应用程序。
    - 配置构建工具压缩和压缩 JavaScript 和 CSS 文件。
- **代码检查和格式化：**
    - 使用 ESLint 等代码检查器强制执行编码标准。
    - 使用 Prettier 等格式化器自动格式化代码。
- **部署最佳实践：**
    - 使用 Docker 等容器化技术打包应用程序及其依赖项。
    - 将应用程序部署到 AWS、Azure 或 Google Cloud 等云平台。
- **CI/CD 集成：**
    - 将应用程序与 CI/CD 管道集成以自动化构建、测试和部署过程。
    - 使用 Jenkins、Travis CI 或 CircleCI 等 CI/CD 工具。
