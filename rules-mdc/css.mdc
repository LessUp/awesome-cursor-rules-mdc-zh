---
description: 此规则提供 CSS 开发的最佳实践，涵盖代码组织、性能、安全、测试和常见陷阱。旨在确保可维护、可扩展和高效的 CSS 代码。
globs: "*.css"
---
- **使用 CSS 预处理器**：利用 Sass、Less 或 Stylus 等预处理器的变量、嵌套、混合和函数功能来增强代码组织和可维护性。

- **代码组织和结构**：
  - **目录结构**：根据功能将 CSS 文件组织到逻辑目录中（例如，`components`、`modules`、`pages`、`themes`）。
  - **文件命名约定**：使用有意义且一致的文件名（例如，`button.css`、`header.module.css`）。考虑使用 BEM（块、元素、修饰符）或 SUIT CSS 等命名约定。
  - **模块组织**：将大型样式表分解为更小的可重用模块。
  - **组件架构**：基于 UI 组件构建 CSS，确保每个组件都有专用的样式表。
  - **代码分割**：将 CSS 分为关键（首屏）和非关键 CSS，以改善初始页面加载时间。利用 `Critical CSS` 或 `PurgeCSS` 等工具。

- **格式和样式**：
  - **缩进**：使用两个空格的软制表符进行缩进。
  - **尾随空白**：避免尾随空白。
  - **声明顺序**：保持一致的声明顺序（例如，按字母顺序、分组相关属性）。
  - **属性单位**：使用适当的单位（例如，字体大小使用 `rem` 或 `em`，响应式布局使用 `vw` 或 `%`）。
  - **引号**：在选择器中的属性值使用双引号。
  - **行长度**：保持行长度合理（例如，少于 80-100 个字符）以提高可读性。

- **常见模式和反模式**：
  - **BEM（块、元素、修饰符）**：使用 BEM 或类似方法进行清晰和可维护的类命名。
  - **面向对象的 CSS（OOCSS）**：应用 OOCSS 原则创建可重用和可扩展的样式。
  - **避免 !important**：最小化使用 `!important` 以防止特异性冲突。
  - **避免内联样式**：优先使用外部样式表或嵌入式样式而不是内联样式，以获得更好的可维护性和关注点分离。
  - **不要使用 ID 进行样式设置**：避免使用 ID 进行样式设置，因为它们过于特定，使样式更难覆盖。

- **理解 CSS 特异性**：掌握 CSS 特异性规则以避免意外的样式冲突。谨慎使用特定选择器。

- **使用灵活/相对单位**：使用 `em`、`rem` 和 `vw` 等相对单位创建适应不同屏幕尺寸的响应式设计。

- **性能考虑**：
  - **优化选择器**：使用高效的 CSS 选择器以最小化渲染时间。避免过于复杂的选择器。
  - **压缩 CSS**：压缩 CSS 文件以减少文件大小并改善加载时间。
  - **压缩 CSS**：在服务器上使用 Gzip 或 Brotli 压缩进一步减少 CSS 文件大小。
  - **浏览器缓存**：利用浏览器缓存在本地存储 CSS 文件，减少服务器负载并提高性能。
  - **避免昂贵的属性**：尽可能避免计算成本高的 CSS 属性（例如，`filter`、具有大模糊半径的 `box-shadow`）。

- **安全最佳实践**：
  - **清理用户输入**：当使用基于用户输入的 CSS 变量时，清理输入以防止 CSS 注入攻击。
  - **内容安全策略（CSP）**：实施 CSP 来控制可以加载 CSS 的来源。

- **测试方法**：
  - **单元测试**：使用 `CSS Modules` 或 `styled-components` 等工具为单个 CSS 组件编写单元测试。
  - **视觉回归测试**：实施视觉回归测试以检测 CSS 样式的意外变化。
  - **代码检查**：使用 CSS 代码检查器（例如，`stylelint`）强制执行编码标准并捕获潜在错误。

- **常见陷阱和注意事项**：
  - **特异性冲突**：注意特异性问题并使用工具可视化和管理 CSS 特异性。
  - **浏览器兼容性**：在不同浏览器和版本中测试 CSS 以确保兼容性。
  - **供应商前缀**：必要时使用供应商前缀，但考虑使用 `autoprefixer` 等工具自动化该过程。

- **工具和环境**：
  - **CSS 代码检查器**：使用 `stylelint` 强制执行编码标准并识别潜在错误。
  - **CSS 格式化器**：使用 `Prettier` 等工具自动一致地格式化 CSS 代码。
  - **构建工具**：使用 `Webpack`、`Parcel` 或 `Gulp` 等工具将 CSS 编译、压缩和优化集成到构建过程中。
  - **CSS 模块**：使用 CSS 模块在本地范围内限定 CSS 类并避免命名冲突。

- **其他提示**：
  - **记录 CSS**：添加注释解释复杂或不明显的 CSS 规则。
  - **保持 CSS DRY（不要重复自己）**：使用变量、混合和继承尽可能重用 CSS 代码。
  - **定期审查和重构**：定期审查和重构 CSS 代码以保持其质量并防止代码膨胀。
  - **考虑可访问性**：确保 CSS 样式有助于网站可访问性（例如，足够的颜色对比度、正确使用语义 HTML）。
  - **使用 CSS 变量（自定义属性）**：使用 CSS 变量进行主题设置并管理整个 CSS 中的值。
