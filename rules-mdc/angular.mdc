---
description: 此规则提供 Angular 开发的综合指南，涵盖编码标准、最佳实践、性能优化、安全考虑和测试方法，以确保可维护、可扩展和高性能的应用程序。
globs: "*.ts,*.html,*.scss,*.css"
---
# Angular 最佳实践和编码标准

本文档概述了开发 Angular 应用程序的综合最佳实践和编码标准。遵循这些指南将促进可维护性、可扩展性、性能和安全性。

## 1. 代码组织和结构

### 1.1. 目录结构最佳实践

- **基于功能的模块：** 将应用程序组织成功能模块，每个模块封装特定的功能或功能性。
- **共享模块：** 为常用组件、指令、管道和服务创建 `shared` 模块。
- **核心模块：** 为应用程序范围的服务和单例实例（例如，身份验证服务、配置服务）创建 `core` 模块。
- **延迟加载模块：** 将相关功能分组到延迟加载模块中以改善初始加载时间。
- **目录结构示例：**


  src/
  ├── app/
  │   ├── core/
  │   │   ├── core.module.ts
  │   │   └── auth.service.ts
  │   ├── shared/
  │   │   ├── shared.module.ts
  │   │   └── components/
  │   │       └── ...
  │   ├── features/
  │   │   ├── dashboard/
  │   │   │   ├── dashboard.module.ts
  │   │   │   ├── dashboard.component.ts
  │   │   │   └── dashboard.component.html
  │   │   ├── user-management/
  │   │   │   ├── user-management.module.ts
  │   │   │   └── ...
  │   │   └── ...
  │   ├── app.component.ts
  │   └── app.module.ts
  └── ...


### 1.2. 文件命名约定

- **一致命名：** 对所有文件和符号使用一致的命名模式，遵循 `feature.type.ts` 约定（例如，`user.component.ts`、`user.service.ts`）。
- **类型缩写：** 对文件类型使用缩写（例如，`component.ts` -> `.component.ts`、`service.ts` -> `.service.ts`、`module.ts` -> `.module.ts`）。
- **描述性名称：** 使用清楚表明文件目的的描述性名称。

### 1.3. 模块组织

- **单一职责：** 每个模块应该有单一职责。
- **声明：** 在适当的模块中声明组件、指令和管道。
- **导入：** 在每个模块中仅导入必要的模块。
- **导出：** 导出需要被其他模块使用的组件、指令和管道。
- **forRoot() 模式：** 对提供单例服务的模块使用 `forRoot()` 模式，以确保它们在应用程序中只实例化一次。

### 1.4. 组件架构

- **智能 vs. 哑组件：** 区分处理数据和逻辑的智能（容器）组件和专注于渲染 UI 的哑（展示）组件。
- **组件可重用性：** 设计组件以实现可重用性。
- **输入和输出属性：** 使用 `@Input()` 和 `@Output()` 属性在组件之间传递数据和事件。
- **变更检测：** 注意变更检测策略（例如，`OnPush`）以优化渲染性能。

### 1.5. 代码分割策略

- **延迟加载：** 为模块实施延迟加载以减少初始包大小并改善加载时间。
- **基于路由的代码分割：** 根据路由将应用程序分割为模块。
- **基于功能的代码分割：** 根据功能将应用程序分割为模块。

## 2. 常见模式和反模式

### 2.1. Angular 特定的设计模式

- **依赖注入（DI）：** 使用 DI 管理组件和服务之间的依赖关系。
- **可观察对象：** 使用 RxJS 可观察对象处理异步数据流。
- **服务：** 使用服务封装可重用的业务逻辑。
- **管道：** 使用管道在模板中转换数据。
- **指令：** 使用指令操作 DOM。

### 2.2. 常见任务的推荐方法

- **数据绑定：** 使用数据绑定（`{{ }}`、`[]`、`()`）在组件和模板之间同步数据。
- **事件处理：** 使用事件绑定（`()`）处理用户交互。
- **表单处理：** 使用响应式表单或模板驱动表单管理用户输入。
- **HTTP 请求：** 使用 `HttpClient` 向后端 API 发出 HTTP 请求。

### 2.3. 要避免的反模式和代码异味

- **深度嵌套组件：** 避免深度嵌套的组件层次结构，这会使状态和事件管理变得困难。
- **大型组件：** 将大型组件分解为更小的可重用组件。
- **模板中的逻辑：** 避免在模板中使用复杂逻辑；将其移到组件类中。
- **直接 DOM 操作：** 避免直接 DOM 操作；使用 Angular 的数据绑定和指令代替。
- **不必要的订阅：** 取消订阅可观察对象以防止内存泄漏。在模板中使用 `async` 管道自动处理订阅和取消订阅。

### 2.4. 状态管理最佳实践

- **选择状态管理库：** 对于复杂应用程序，考虑使用 NgRx、Akita 或 MobX 等状态管理库。
- **集中状态：** 将应用程序状态存储在中央存储中。
- **不可变性：** 将状态视为不可变以简化变更检测和调试。
- **动作和减速器：** 使用动作描述状态变化，使用减速器更新状态。
- **选择器：** 使用选择器高效地从存储中检索数据。

### 2.5. 错误处理模式

- **集中式错误处理：** 使用 `ErrorHandler` 实施集中式错误处理机制。
- **错误拦截器：** 使用 HTTP 拦截器处理来自后端 API 的错误。
- **用户友好的错误消息：** 向用户显示用户友好的错误消息。
- **日志记录：** 将错误记录到中央日志记录服务以进行调试和监控。
- **重试机制：** 使用 RxJS 重试操作符为失败的请求实施重试机制。

## 3. 性能考虑

### 3.1. 优化技术

- **变更检测优化：** 对仅依赖其输入属性的组件使用 `OnPush` 变更检测策略。
- **TrackBy 函数：** 在 `ngFor` 中使用 `trackBy` 函数优化列表渲染。
- **虚拟化：** 对大型列表使用虚拟滚动以提高性能。
- **预先编译（AOT）：** 使用 AOT 编译在构建过程中编译模板，改善启动时间。
- **压缩和混淆：** 压缩和混淆代码以减少包大小。

### 3.2. 内存管理

- **取消订阅可观察对象：** 当不再需要可观察对象时取消订阅以防止内存泄漏。
- **避免循环依赖：** 避免可能导致内存泄漏的循环依赖。
- **分离事件监听器：** 当不再需要事件监听器时分离它们。

### 3.3. 渲染优化

- **最小化 DOM 操作：** 最小化 DOM 操作，因为它们可能很昂贵。
- **使用 CSS 变换：** 使用 CSS 变换而不是修改布局属性。
- **防抖和节流：** 使用防抖和节流减少事件处理程序的频率。

### 3.4. 包大小优化

- **延迟加载：** 为模块实施延迟加载以减少初始包大小。
- **树摇：** 使用树摇从包中删除未使用的代码。
- **代码分割：** 将应用程序分割为更小的包以改善加载时间。
- **图像优化：** 优化图像以减少其文件大小。
- **供应商库：** 仅使用必要的供应商库，并确保它们是最新的优化版本。

### 3.5. 延迟加载策略

- **基于路由的延迟加载：** 在导航到特定路由时加载模块。
- **基于功能的延迟加载：** 根据功能需求加载模块。
- **预加载：** 在后台预加载模块以改善感知性能。

## 4. 安全最佳实践

### 4.1. 常见漏洞及其预防方法

- **跨站脚本（XSS）：** 通过清理用户输入和避免使用 `innerHTML` 来防止 XSS 攻击。
- **跨站请求伪造（CSRF）：** 通过使用反 CSRF 令牌防止 CSRF 攻击。
- **注入攻击：** 通过验证用户输入和使用参数化查询防止注入攻击。

### 4.2. 输入验证

- **客户端验证：** 执行客户端验证以向用户提供即时反馈。
- **服务器端验证：** 执行服务器端验证以确保数据完整性。
- **白名单验证：** 使用白名单验证仅允许特定字符或模式。

### 4.3. 身份验证和授权模式

- **身份验证：** 实施身份验证以验证用户身份。
- **授权：** 实施授权以根据用户角色和权限控制对资源的访问。
- **JSON Web 令牌（JWT）：** 使用 JWT 进行安全身份验证和授权。
- **OAuth 2.0：** 使用 OAuth 2.0 将授权委托给第三方应用程序。

### 4.4. 数据保护策略

- **加密：** 对静态和传输中的敏感数据进行加密。
- **哈希：** 在将密码存储到数据库之前对其进行哈希处理。
- **数据掩码：** 掩码敏感数据以防止未经授权的访问。

### 4.5. 安全 API 通信

- **HTTPS：** 使用 HTTPS 在客户端和服务器之间进行安全通信。
- **API 密钥：** 使用 API 密钥验证 API 请求。
- **速率限制：** 实施速率限制以防止 API 滥用。

## 5. 测试方法

### 5.1. 单元测试策略

- **测试驱动开发（TDD）：** 在编写代码之前编写测试。
- **组件测试：** 使用模拟数据独立测试组件。
- **服务测试：** 使用依赖注入独立测试服务。
- **管道测试：** 测试管道以确保它们正确转换数据。

### 5.2. 集成测试

- **模块测试：** 测试模块以确保它们正确集成。
- **组件交互测试：** 测试组件之间的交互。
- **HTTP 测试：** 测试 HTTP 请求和响应。

### 5.3. 端到端测试

- **用户界面（UI）测试：** 测试 UI 以确保其按预期行为。
- **工作流测试：** 测试完整工作流以确保其正常运行。
- **跨浏览器测试：** 在不同浏览器中测试应用程序。

### 5.4. 测试组织

- **测试目录结构：** 在测试目录中镜像源代码目录结构。
- **测试文件命名：** 对测试文件使用一致的命名约定（例如，`user.component.spec.ts`）。
- **测试套件：** 将相关测试分组到测试套件中。

### 5.5. 模拟和存根

- **模拟依赖项：** 模拟依赖项以隔离代码单元进行测试。
- **存根 HTTP 请求：** 存根 HTTP 请求以避免在测试期间进行实际 API 调用。
- **使用模拟库：** 使用 Jasmine 或 Jest 等模拟库简化模拟和存根。

## 6. 常见陷阱和注意事项

### 6.1. 开发人员常犯的错误

- **忘记取消订阅可观察对象：** 始终取消订阅可观察对象以防止内存泄漏。
- **使用 `any` 类型：** 避免使用 `any` 类型，因为它绕过了类型检查。
- **不处理错误：** 优雅地处理错误以防止意外行为。
- **忽略性能：** 从一开始就优化代码性能。

### 6.2. 需要注意的边缘情况

- **空数组：** 正确处理空数组。
- **空值：** 正确处理空值。
- **意外输入：** 验证用户输入以防止意外行为。

### 6.3. 版本特定问题

- **破坏性变更：** 注意 Angular 和第三方库新版本中的破坏性变更。
- **已弃用的 API：** 避免使用已弃用的 API。
- **迁移指南：** 在升级到新版本的 Angular 时遵循迁移指南。

### 6.4. 兼容性问题

- **浏览器兼容性：** 在不同浏览器中测试应用程序以确保兼容性。
- **设备兼容性：** 在不同设备上测试应用程序以确保兼容性。

### 6.5. 调试策略

- **浏览器开发者工具：** 使用浏览器开发者工具调试代码。
- **日志记录：** 使用日志记录跟踪执行流程并识别错误。
- **调试工具：** 使用 VS Code 的调试器等调试工具逐步执行代码。

## 7. 工具和环境

### 7.1. 推荐的开发工具

- **VS Code：** 使用 VS Code 作为代码编辑器。
- **Angular CLI：** 使用 Angular CLI 进行脚手架、构建和部署应用程序。
- **Chrome 开发者工具：** 使用 Chrome 开发者工具进行调试和性能分析。

### 7.2. 构建配置

- **Angular CLI 配置：** 在 `angular.json` 文件中配置 Angular CLI 设置。
- **环境变量：** 使用环境变量为不同环境配置应用程序。
- **构建优化：** 配置构建过程以优化生产代码。

### 7.3. 代码检查和格式化

- **ESLint：** 使用 ESLint 强制执行编码标准。
- **Prettier：** 使用 Prettier 自动格式化代码。
- **Husky：** 使用 Husky 在提交代码之前运行代码检查器和格式化器。

### 7.4. 部署最佳实践

- **持续集成/持续部署（CI/CD）：** 使用 CI/CD 管道自动化构建、测试和部署过程。
- **部署环境：** 为开发、测试和生产使用不同的部署环境。
- **CDN：** 使用内容分发网络（CDN）提供静态资源。

### 7.5. CI/CD 集成

- **Jenkins：** 使用 Jenkins 进行 CI/CD。
- **GitHub Actions：** 使用 GitHub Actions 进行 CI/CD。
- **Azure DevOps：** 使用 Azure DevOps 进行 CI/CD。
- **GitLab CI：** 使用 GitLab CI 进行 CI/CD。

通过遵循这些最佳实践和编码标准，您可以构建强大、可维护和可扩展的 Angular 应用程序。
