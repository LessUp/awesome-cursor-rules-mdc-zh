---
description: Django 最佳实践的综合指南，涵盖代码组织、性能、安全、测试和常见陷阱。此规则确保遵循社区标准，以构建可维护和高效的 Django 应用程序。
globs: "*.py"
---
# Django 最佳实践和编码标准

本指南概述了开发 Django 应用程序的最佳实践，以确保代码质量、可维护性、性能和安全性。

## 1. 代码组织和结构

- **目录结构：**
    - **项目根目录：** manage.py、settings、urls、wsgi。
    - **应用：** 每个应用应该位于自己的目录中。
    - **静态文件：** 静态文件（CSS、JavaScript、图像）的单独目录。
    - **模板：** HTML 模板的专用目录。
    - **媒体：** 用于用户上传的文件。
    - **测试：** 每个应用的测试在单独的 tests/ 目录中。

- **文件命名约定：**
    - 对 Python 文件和变量使用小写字母和下划线（snake_case）（例如，`models.py`、`user_profile`）。
    - 类应该使用驼峰命名法（例如，`UserProfile`）。
    - 函数名应该使用 snake_case（例如，`get_user_profile`）。

- **模块组织：**
    - 每个应用应该是一个自包含的模块。
    - 将相关功能分组到应用内的子模块中。
    - 使用 `__init__.py` 文件定义包。

- **组件架构：**
    - 遵循模型-视图-模板（MVT）架构。
    - 保持模型精简并专注于数据表示。
    - 使用视图处理请求和业务逻辑。
    - 模板应该专注于表示。

- **代码分割策略：**
    - 将大型视图分解为更小的可重用函数或基于类的视图。
    - 使用混合类在多个视图之间共享功能。
    - 实现自定义模板标签和过滤器以实现可重用的模板逻辑。
    - 考虑使用 Celery 进行异步任务处理。

## 2. 常见模式和反模式

- **设计模式：**
    - **模型-视图-模板（MVT）：** Django 的核心架构模式。
    - **表单对象：** 使用 Django 的表单处理用户输入和验证。
    - **信号：** 实现信号进行解耦的事件处理。
    - **管理器：** 使用自定义模型管理器封装查询逻辑。
    - **DRY（不要重复自己）：** 通过提取可重用组件避免冗余代码。

- **推荐方法：**
    - **数据库交互：** 使用 Django 的 ORM 进行数据库交互。除非必要，避免原始 SQL 查询。
    - **表单处理：** 利用 Django 的表单类进行数据验证和渲染表单。
    - **URL 路由：** 使用命名 URL 模式进行反向 URL 查找。
    - **模板继承：** 利用模板继承创建一致的外观和感觉。

- **反模式和代码异味：**
    - **臃肿模型：** 避免在模型中放置太多业务逻辑。使用服务或实用函数代替。
    - **复杂模板：** 保持模板简单并专注于表示。将复杂逻辑移到视图或自定义模板标签中。
    - **硬编码值：** 避免在代码中硬编码值。使用设置或环境变量。
    - **忽略安全：** 忽视安全最佳实践可能导致漏洞。

- **状态管理：**
    - 使用 Django 的会话框架管理用户会话。
    - 避免在会话中存储敏感数据。
    - 考虑使用专用缓存系统（例如，Redis、Memcached）存储频繁访问的数据。

- **错误处理：**
    - 使用 `try...except` 块实现适当的错误处理。
    - 使用 Django 的日志框架记录错误和警告。
    - 显示用户友好的错误消息。

## 3. 性能考虑

- **优化技术：**
    - **数据库优化：** 在频繁查询的字段上使用索引。
    - **缓存：** 在各个级别实现缓存（例如，模板缓存、视图缓存、数据库缓存）。
    - **查询优化：** 使用 `select_related` 和 `prefetch_related` 减少数据库查询次数。
    - **Gzip 压缩：** 为静态文件和响应启用 Gzip 压缩。

- **内存管理：**
    - 避免将大型数据集加载到内存中。使用迭代器或生成器。
    - 正确关闭数据库连接和文件句柄。
    - 注意内存泄漏。

- **渲染优化：**
    - 最小化复杂模板逻辑的使用。
    - 使用模板缓存来缓存渲染的模板。
    - 优化图像和其他静态资源。

- **延迟加载策略：**
    - 为不立即可见的图像和其他资源实现延迟加载。
    - 使用分页以较小的块显示大型数据集。

## 4. 安全最佳实践

- **常见漏洞：**
    - **跨站脚本（XSS）：** 通过在模板中转义用户输入并使用 Django 的 `escape` 过滤器来防止 XSS。
    - **跨站请求伪造（CSRF）：** 通过使用 Django 的 CSRF 保护来防止 CSRF 攻击。
    - **SQL 注入：** 使用 Django 的 ORM 防止 SQL 注入攻击。避免原始 SQL 查询。
    - **身份验证和授权问题：** 实现适当的身份验证和授权机制。

- **输入验证：**
    - 在客户端和服务器端验证所有用户输入。
    - 使用 Django 的表单验证来验证数据。
    - 清理用户输入以删除潜在有害字符。

- **身份验证和授权：**
    - 使用 Django 的内置身份验证系统进行用户身份验证。
    - 实现适当的授权检查以限制对敏感资源的访问。
    - 使用 Django 的权限系统管理用户权限。

- **数据保护：**
    - 使用加密安全存储敏感数据。
    - 使用 HTTPS 加密客户端和服务器之间的通信。
    - 通过实施适当的访问控制和监控来防止数据泄露。

- **安全 API 通信：**
    - 使用身份验证令牌或 API 密钥验证 API 请求。
    - 实施速率限制以防止滥用。
    - 验证所有 API 输入。

## 5. 测试方法

- **单元测试：**
    - 为单个函数和类编写单元测试。
    - 使用 Django 的测试框架编写和运行测试。
    - 模拟外部依赖项以隔离代码单元。

- **集成测试：**
    - 编写集成测试以测试不同组件之间的交互。
    - 测试数据库交互、表单处理和视图渲染。

- **端到端测试：**
    - 编写端到端测试以测试整个应用程序流程。
    - 使用 Selenium 或 Cypress 等工具自动化浏览器测试。

- **测试组织：**
    - 将测试组织成每个应用或组件的单独测试套件。
    - 使用有意义的测试名称描述每个测试的作用。
    - 保持测试简洁和专注。

- **模拟和存根：**
    - 使用模拟和存根在测试期间隔离代码单元。
    - 除非必要，避免模拟外部依赖项。

## 6. 常见陷阱和注意事项

- **常见错误：**
    - **错误的数据库配置：** 确保数据库设置配置正确。
    - **不当的静态文件处理：** 在生产中正确配置静态文件服务。
    - **不使用 Django 的内置功能：** 利用 Django 的内置功能而不是重新发明轮子。
    - **忽略安全警告：** 解决 Django 安全检查报告的任何安全警告或漏洞。

- **边缘情况：**
    - **处理时区：** 注意时区并使用 Django 的时区支持。
    - **处理 Unicode：** 正确处理 Unicode 字符。
    - **管理文件上传：** 实现适当的文件上传处理以防止安全漏洞。

- **版本特定问题：**
    - 注意不同 Django 版本之间的兼容性问题。
    - 查阅 Django 发布说明了解破坏性变更信息。

- **兼容性问题：**
    - 确保您的代码与不同浏览器和设备兼容。
    - 在不同平台上测试您的应用程序。

- **调试策略：**
    - 使用 Django 的调试工具识别和修复错误。
    - 使用日志记录跟踪应用程序的执行流程。
    - 查阅 Django 文档和社区论坛寻求帮助。

## 7. 工具和环境

- **推荐的开发工具：**
    - **IDE：** PyCharm、VS Code、Sublime Text
    - **包管理器：** pip、uv
    - **数据库客户端：** pgAdmin、MySQL Workbench

- **构建配置：**
    - 使用 `requirements.txt` 文件管理依赖项。
    - 使用虚拟环境隔离项目依赖项。

- **代码检查和格式化：**
    - 使用 Black 自动格式化代码。
    - 使用 flake8 检查代码并识别潜在错误。

- **部署最佳实践：**
    - 使用生产就绪的 Web 服务器（例如，Gunicorn、uWSGI）。
    - 配置反向代理（例如，Nginx、Apache）。
    - 使用数据库服务器（例如，PostgreSQL、MySQL）。

- **CI/CD 集成：**
    - 将您的项目与 CI/CD 管道集成以自动化测试和部署。
    - 使用 Jenkins、Travis CI 或 GitLab CI 等工具。

## 附加说明

- 始终遵循 Python 代码的 PEP 8 指南。
- 编写清晰简洁的注释。
- 保持代码 DRY（不要重复自己）。
- 定期更新您的依赖项。
- 监控您的应用程序的性能和安全问题。
