---
description: 此规则文件提供 Docker 最佳实践的综合指导，涵盖 Dockerfile 构建、镜像优化和安全考虑。旨在提高基于 Docker 项目的效率、可维护性和安全性。
globs: "Dockerfile,docker-compose.yml,*.dockerfile"
---
# Docker 最佳实践

本文档提供 Docker 最佳实践的综合指导，涵盖 Dockerfile 构建、镜像优化、安全考虑等。旨在提高基于 Docker 项目的效率、可维护性和安全性。

## 1. 代码组织和结构

- **目录结构最佳实践：**
    - 以清晰的关注点分离组织您的项目。例如：
        
        project-root/
        ├── Dockerfile            # 用于构建镜像的 Dockerfile
        ├── docker-compose.yml    # 多容器设置的 Docker Compose 文件
        ├── .dockerignore         # 指定 Docker 应忽略的有意未跟踪文件
        ├── app/                  # 应用程序源代码
        │   ├── ...
        ├── config/               # 配置文件
        │   ├── ...
        ├── data/                 # 数据文件（如果有，但考虑使用卷）
        │   ├── ...
        ├── scripts/              # 用于构建、部署或管理容器的脚本
        │   ├── ...
        
    - 将 `Dockerfile` 和 `docker-compose.yml` 保存在项目根目录以便于访问。

- **文件命名约定：**
    - 为您的 Dockerfile 使用描述性名称（例如，`Dockerfile.web`、`Dockerfile.api`）。
    - 对所有文件和目录遵循一致的命名约定。

- **模块组织：**
    - 将您的应用程序构建为模块化组件以提高可重用性和可维护性。这直接影响 Docker 镜像中的内容。
    - 使用适当的构建工具（例如，Maven、Gradle、npm）管理依赖项并打包您的应用程序。

- **组件架构：**
    - 在适当时，将您的应用程序设计为一组微服务或组件，每个都在自己的容器中运行。
    - 使用 Docker Compose 编排多容器应用程序。

- **代码分割策略：**
    - 将大型应用程序分解为更小、更易管理的部分，以减少镜像大小并改善构建时间。
    - 考虑多阶段构建，在一个阶段包含构建时依赖项，在最终镜像中仅包含运行时依赖项。

## 2. 常见模式和反模式

- **Docker 特定的设计模式：**
    - **边车模式：** 在主应用程序容器旁边运行实用程序容器（例如，用于日志记录、监控）。
    - **大使模式：** 代理对运行在容器外部的服务的请求。
    - **适配器模式：** 调整服务的接口以匹配客户端的预期接口。
    - **初始化容器模式：** 在主应用程序容器启动之前运行初始化任务。通常用于设置配置、准备数据库等。

- **常见任务的推荐方法：**
    - **配置管理：** 使用环境变量配置您的应用程序。
    - **日志记录：** 使用日志驱动程序或专用日志容器（例如，Fluentd、Logstash）集中日志记录。
    - **健康检查：** 实施健康检查以确保您的服务正常运行。
    - **进程管理：** 使用进程管理器（例如，`tini`、`dumb-init`）处理信号转发和僵尸进程回收。

- **要避免的反模式和代码异味：**
    - **在 Dockerfile 或镜像中存储机密：** 永远不要在 Dockerfile 中硬编码密码或 API 密钥。
    - **以 root 身份运行服务：** 避免以 root 用户身份运行您的应用程序。
    - **安装不必要的包：** 仅安装所需的依赖项以保持镜像精简。
    - **忽略 `.dockerignore`：** 确保使用 `.dockerignore` 从构建上下文中排除不必要的文件，减少镜像大小和构建时间。
    - **不必要地使用 `ADD` 而不是 `COPY`：** `COPY` 通常更透明和可预测。

- **状态管理最佳实践：**
    - **无状态应用程序：** 尽可能将您的应用程序设计为无状态。
    - **卷：** 使用卷进行持久存储（例如，数据库、日志）。
    - **绑定挂载：** 在开发中使用绑定挂载以允许代码更改立即反映在容器中。

- **错误处理模式：**
    - 在您的应用程序中实施强大的错误处理。
    - 使用适当的日志级别捕获错误和警告。
    - 为瞬态错误实施重试机制。
    - 监控您的应用程序错误并采取纠正措施。

## 3. 性能考虑

- **优化技术：**
    - **多阶段构建：** 使用多阶段构建创建更小、更高效的镜像。
    - **最小化层：** 使用 `&&` 将多个命令合并到单个层中。
    - **使用轻量级基础镜像：** 选择像 Alpine Linux 这样的最小基础镜像。
    - **优化缓存：** 排序您的 Dockerfile 命令以最大化缓存重用。

- **内存管理：**
    - 为您的容器设置内存限制以防止它们消耗过多资源。
    - 监控内存使用情况并相应优化您的应用程序。

- **渲染优化（如果适用）：**
    - 如果您的应用程序涉及渲染，优化渲染过程（例如，使用缓存、延迟加载）。

- **包大小优化：**
    - 通过删除不必要的依赖项和资源最小化应用程序包的大小。
    - 使用 webpack 或 Parcel 等工具优化您的包。

- **延迟加载策略：**
    - 为不立即需要的资源实施延迟加载。

## 4. 安全最佳实践

- **常见漏洞及其预防方法：**
    - **镜像漏洞：** 使用 Clair 或 Trivy 等工具定期扫描您的镜像漏洞。
    - **配置漏洞：** 保护您的容器配置以防止未经授权的访问。
    - **网络漏洞：** 限制网络暴露并使用网络策略隔离容器。
    - **权限提升：** 避免以不必要的权限运行容器。

- **输入验证：**
    - 验证所有输入数据以防止注入攻击。

- **身份验证和授权模式：**
    - 实施强大的身份验证和授权机制。
    - 使用 HTTPS 等安全协议。
    - 使用 HashiCorp Vault 或 Kubernetes Secrets 等工具安全存储机密。

- **数据保护策略：**
    - 对静态和传输中的敏感数据进行加密。
    - 使用适当的访问控制机制保护数据。

- **安全 API 通信：**
    - 对 API 通信使用 HTTPS 等安全协议。
    - 为 API 端点实施身份验证和授权。
    - 对 API 请求进行速率限制以防止滥用。

## 5. 测试方法

- **单元测试策略：**
    - 编写单元测试验证单个组件的功能。
    - 使用模拟和存根在测试期间隔离组件。

- **集成测试：**
    - 编写集成测试验证不同组件之间的交互。
    - 测试与外部服务和数据库的集成。

- **端到端测试：**
    - 编写端到端测试验证整个应用程序流程。
    - 使用 Selenium 或 Cypress 等工具自动化端到端测试。

- **测试组织：**
    - 将您的测试组织成清晰且可维护的结构。
    - 为您的测试用例使用描述性名称。

- **模拟和存根：**
    - 使用模拟和存根在测试期间隔离组件。
    - 模拟外部服务和数据库以模拟不同场景。

## 6. 常见陷阱和注意事项

- **开发人员常犯的错误：**
    - **不使用 `.dockerignore`：** 这可能导致镜像大小过大和构建时间缓慢。
    - **不固定包版本：** 这可能由于依赖项更新导致意外的构建失败。
    - **暴露不必要的端口：** 这可能增加应用程序的攻击面。
    - **安装包后不清理：** 这可能导致镜像大小增大。
    - **使用 `CMD` 或 `ENTRYPOINT` 的 shell 形式：** 使用 exec 形式（`["executable", "param1", "param2"]`）避免 shell 注入漏洞和信号处理问题。

- **需要注意的边缘情况：**
    - **文件权限：** 确保您的应用程序具有正确的文件权限。
    - **时区配置：** 为您的容器配置正确的时区。
    - **资源限制：** 为您的容器设置适当的资源限制。

- **版本特定问题：**
    - 注意版本特定问题和兼容性问题。
    - 使用不同的 Docker 版本测试您的应用程序以确保兼容性。

- **兼容性问题：**
    - 确保您的应用程序与您使用的基础镜像兼容。
    - 在不同平台上测试您的应用程序以确保跨平台兼容性。

- **调试策略：**
    - 使用 `docker logs` 查看容器日志。
    - 使用 `docker exec` 在运行的容器内执行命令。
    - 使用 `docker inspect` 检查容器元数据。
    - 使用调试器调试您的应用程序代码。

## 7. 工具和环境

- **推荐的开发工具：**
    - **Docker Desktop：** 用于本地开发和测试。
    - **Docker Compose：** 用于编排多容器应用程序。
    - **带有 Docker 扩展的 Visual Studio Code：** 用于增强的 Docker 开发体验。
    - **容器镜像扫描器（例如，Trivy、Clair）：** 用于识别容器镜像中的漏洞。

- **构建配置：**
    - 为所有镜像使用一致的构建配置。
    - 使用构建工具（例如，Make、Gradle）自动化构建过程。

- **代码检查和格式化：**
    - 使用代码检查器强制执行代码样式和最佳实践。
    - 使用格式化器自动格式化您的代码。

- **部署最佳实践：**
    - 使用像 Kubernetes 或 Docker Swarm 这样的容器编排平台。
    - 实施滚动更新和回滚。
    - 监控您的应用程序的性能和可用性。

- **CI/CD 集成：**
    - 将 Docker 集成到您的 CI/CD 管道中。
    - 自动化构建、测试和部署过程。
    - 使用 Jenkins、GitLab CI 或 CircleCI 等工具。

---

## 附加说明：

- 始终为基础镜像使用特定标签（例如，`ubuntu:20.04`）而不是 `latest` 以确保可重现性。
- 使用 `.dockerignore` 排除镜像中不需要的文件和目录。这减少了镜像大小并改善了构建性能。
- 尽可能使用 Docker Hub 的官方 Docker 镜像。它们通常维护良好且经过优化。
- 考虑使用 `docker-slim` 等工具，通过在构建过程后删除不必要的文件和依赖项来进一步减少 Docker 镜像的大小。
- 理解 Docker 构建上下文并确保您只包含必要的文件和目录。大型构建上下文会减慢构建速度并增加镜像大小。
- 定期更新您的基础镜像以修补安全漏洞。
- 使用环境变量配置您的应用程序，使其更灵活和可移植。
- 在您的 Dockerfile 中实施健康检查以确保您的容器正常运行。这可以使用 `HEALTHCHECK` 指令完成。
- 考虑使用私有 Docker 注册表安全存储您的镜像。
- 记录您的 Dockerfile 和镜像以使其更易于理解和维护。
- 定期审查您的 Dockerfile 以确保它们是最新的并遵循最佳实践。
- 考虑使用像 `hadolint` 这样的 Dockerfile 代码检查器来识别潜在问题并强制执行最佳实践。

通过遵循这些指南，您可以创建高效、可维护和安全的基于 Docker 的应用程序。
