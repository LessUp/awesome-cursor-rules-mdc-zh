---
description: 使用 Terraform 进行 AWS 开发的综合规则和最佳实践，涵盖代码组织、安全性、性能和测试。遵循这些指导原则确保基础设施代码的可维护性、安全性和高效性。
globs: "*.tf"
---
# 使用 Terraform 的 AWS 开发最佳实践

本文档概述了使用 Terraform 开发和维护 AWS 基础设施的最佳实践。遵循这些指导原则将有助于确保您的代码可维护、安全且高效。

## 1. 代码组织和结构

### 1.1 目录结构

- **根模块**：基础设施定义的主要入口点。包含 `main.tf`、`variables.tf`、`outputs.tf`、`providers.tf`、`versions.tf` 和 `locals.tf`。
- **模块目录**：基础设施的可重用组件。每个模块应在 `modules/` 下有自己的目录。
- **示例目录**：演示如何使用模块。每个示例应是一个独立的 Terraform 配置。
- **脚本目录**：Terraform 使用的自定义脚本。
- **模板目录**：使用 `templatefile` 函数读取的文件模板，使用 `.tftpl` 扩展名。
- **文件目录**：包含 Terraform 引用的静态文件（例如，启动脚本）。
- **辅助目录**：包含不直接被 Terraform 调用的工具脚本。
- **.tfvars 文件**：包含变量定义的文件。使用 `terraform.tfvars` 存储通用值，在 `envs/` 目录中创建环境特定文件（例如，`envs/dev/terraform.tfvars`、`envs/prod/terraform.tfvars`）。
- **.gitignore**：指定 Git 应忽略的故意未跟踪文件。
- **docs/**：将任何补充文档放在 `docs/` 子目录中。
- **CODEOWNERS**：记录谁负责模块的文件。在合并任何合并请求之前，所有者应批准它。

示例：

```
├── .terraform/              # Terraform 工作目录
├── modules/
│   ├── ec2/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   ├── outputs.tf
│   │   └── README.md
│   ├── s3/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   ├── outputs.tf
│   │   └── README.md
├── examples/
│   ├── ec2/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   ├── outputs.tf
│   │   └── README.md
│   ├── s3/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   ├── outputs.tf
│   │   └── README.md
├── scripts/
│   ├── configure_instance.sh
├── templates/
│   ├── user_data.tftpl
├── files/
│   ├── application.conf
├── helpers/
│   ├── backup_database.sh
├── terraform.tfvars
├── envs/
│   ├── dev/
│   │   ├── terraform.tfvars
│   ├── prod/
│   │   ├── terraform.tfvars
├── main.tf
├── variables.tf
├── outputs.tf
├── providers.tf
├── versions.tf
├── locals.tf
└── .gitignore
```

### 1.2 文件命名约定

- `main.tf`：资源定义的主要入口点。
- `variables.tf`：变量声明。
- `outputs.tf`：输出声明。
- `providers.tf`：提供者配置。
- `versions.tf`：Terraform 和提供者版本约束。
- `locals.tf`：本地变量定义。
- `*.tfvars`：变量值文件。使用 `terraform.tfvars` 存储默认值，使用 `env/<environment>.tfvars` 存储环境特定值。

### 1.3 模块组织

- **可重用模块**：为常见基础设施组件创建模块（例如，EC2 实例、S3 存储桶、VPC）。
- **模块组合**：通过组合较小的可重用模块来构建复杂的基础设施。
- **模块版本控制**：使用版本控制（例如，Git 标签）管理模块版本。
- **模块命名**：模块仓库必须使用格式 `terraform-<PROVIDER>-<NAME>`。例如：`terraform-aws-ec2`
- **模块源**：在公共注册表上引用另一个模块时，通过直接指向底层 Git 仓库 URL 来固定 Git 提交哈希。示例：

```terraform
module "lambda" {
    source = "github.com/terraform-aws-modules/terraform-aws-lambda.git?ref=e78cdf1f82944897ca6e30d6489f43cf24539374" # --> v4.18.0
}
```

### 1.4 组件架构

- **分层架构**：将基础设施分为逻辑层（例如，网络、计算、数据）。
- **松耦合**：设计组件为松耦合，最小化它们之间的依赖关系。
- **清晰抽象**：使用模块为复杂基础设施组件创建清晰的抽象。

### 1.5 代码分割策略

- **功能分解**：将代码分割为更小、可管理的函数。
- **资源分组**：将相关资源分组到单独的文件或模块中。
- **环境分离**：为环境特定配置使用单独的文件或模块。
- **基于服务的分离**：仅当 `main.tf` 中超过 150 行时，按服务分离资源（例如，`iam.tf`、`ec2.tf`、`s3.tf`）。

## 2. 常见模式和反模式

### 2.1 AWS 特定的设计模式

- **不可变基础设施**：部署新的基础设施组件而不是修改现有组件。
- **基础设施即代码（IaC）**：通过代码管理基础设施，使用 Terraform 等工具。
- **蓝/绿部署**：在现有应用程序旁边部署新版本应用程序，然后切换流量。
- **金丝雀部署**：在向所有人推出之前，将新版本应用程序部署到一小部分用户。

### 2.2 常见任务的推荐方法

- **创建 VPC**：使用 `terraform-aws-modules/vpc/aws` 模块创建 VPC。
- **创建 EC2 实例**：使用 `terraform-aws-modules/ec2-instance/aws` 模块创建 EC2 实例。
- **创建 S3 存储桶**：使用 `terraform-aws-modules/s3-bucket/aws` 模块创建 S3 存储桶。
- **管理 IAM 角色**：使用 `aws_iam_role` 和 `aws_iam_policy` 资源管理 IAM 角色和策略。
- **使用数据源**：利用数据源（例如，`aws_ami`、`aws_vpc`）获取现有 AWS 资源的信息。
- **资源标记**：为所有 AWS 资源添加标签，用于成本分配、自动化和识别。
- **状态文件存储**：使用远程后端（例如，带 DynamoDB 锁定的 S3）存储 Terraform 状态。

### 2.3 要避免的反模式和代码异味

- **硬编码值**：避免在代码中硬编码值。使用变量代替。
- **在代码中存储机密**：绝不在代码中存储机密（例如，密码、API 密钥）。使用 AWS Secrets Manager 或其他机密管理解决方案。
- **过于复杂的模块**：避免创建过于复杂且难以理解的模块。
- **忽略错误**：始终优雅地处理错误。
- **手动基础设施更改**：避免在 Terraform 之外对基础设施进行手动更改。
- **使用嵌入式资源属性**：避免使用这些嵌入式资源属性，而应使用唯一资源附加该伪资源。这些资源关系可能导致每个资源特有的鸡蛋问题。

### 2.4 状态管理最佳实践

- **远程后端**：使用远程后端（例如，带 DynamoDB 锁定的 S3）存储 Terraform 状态。这允许协作并防止数据丢失。
- **状态锁定**：启用状态锁定以防止对状态文件的并发修改。
- **状态加密**：在静态和传输中加密状态文件。
- **工作空间管理**：使用 Terraform 工作空间管理多个环境（例如，开发、暂存、生产）。
- **安全状态访问**：仅限制授权用户和系统访问状态文件。考虑实施最小权限原则。
- **版本控制**：实施状态文件版本控制机制，可能包括频繁备份和使用版本控制系统。
- **避免本地状态**：绝不在本地存储 Terraform 状态。

### 2.5 错误处理模式

- **验证规则**：在变量定义中使用验证规则检查输入值。
- **错误传播**：将错误向上传播到调用堆栈以在更高级别处理。
- **重试逻辑**：为瞬态错误（例如，网络错误、API 限流）实施重试逻辑。
- **日志记录**：记录错误和警告以帮助调试。
- **自定义错误消息**：向用户提供清晰和信息性的错误消息。
- **恐慌处理**：避免使用停止执行的 `panic()` 函数，实施错误处理。

## 3. 性能考虑

### 3.1 优化技术

- **高效资源使用**：为您的工作负载使用适当的实例类型和存储类。
- **缓存**：实施缓存以减少延迟并提高性能。
- **负载均衡**：使用负载均衡在多个实例之间分配流量。
- **内容分发网络（CDN）**：使用 CDN 将静态内容更接近用户交付。
- **数据库优化**：优化数据库查询和索引以获得更快的性能。
- **并行化**：使用 `for_each` 和 `count` 并行化资源创建和修改。

### 3.2 内存管理

- **资源限制**：在 EC2 实例和其他 AWS 资源上设置资源限制。
- **内存分析**：使用内存分析工具识别内存泄漏并优化内存使用。
- **垃圾回收**：为您的应用程序配置垃圾回收设置。

### 3.3 渲染优化

- **最小化渲染**：最小化需要渲染的数据量。
- **高效模板**：使用高效模板生成配置文件。

### 3.4 包大小优化

- **代码分割**：将代码分割为可按需加载的较小包。
- **树摇**：从包中删除未使用的代码。
- **压缩**：压缩代码以减少包大小。
- **压缩**：压缩包以减少下载时间。

### 3.5 延迟加载策略

- **资源延迟加载**：仅在需要时加载资源。
- **虚拟化**：使用虚拟化减少需要加载的资源数量。

## 4. 安全最佳实践

### 4.1 常见漏洞及其预防方法

- **IAM 配置错误**：通过遵循最小权限原则防止 IAM 配置错误。
- **不安全的 S3 存储桶**：通过启用加密、访问日志记录和版本控制来保护 S3 存储桶。
- **安全组配置错误**：配置安全组仅允许必要的流量。
- **SQL 注入**：通过使用参数化查询和输入验证防止 SQL 注入。
- **跨站脚本（XSS）**：通过清理用户输入和输出防止 XSS。
- **跨站请求伪造（CSRF）**：通过使用反 CSRF 令牌防止 CSRF。
- **暴露的机密**：通过使用 AWS Secrets Manager 和 IAM 角色避免暴露机密。

### 4.2 输入验证

- **验证用户输入**：验证用户输入以防止恶意代码注入到您的应用程序中。
- **使用数据类型**：为您的变量使用适当的数据类型以防止类型相关错误。
- **正则表达式**：使用正则表达式验证复杂的输入模式。

### 4.3 身份验证和授权模式

- **IAM 角色**：使用 IAM 角色向 AWS 资源授予权限。
- **多因素身份验证（MFA）**：为所有用户账户启用 MFA。
- **最小权限原则**：仅授予用户执行其任务所需的权限。
- **AWS Cognito**：使用 AWS Cognito 管理用户身份验证和授权。
- **API Gateway 授权**：在 API Gateway 级别实施授权以控制对 API 的访问。

### 4.4 数据保护策略

- **静态加密**：使用 AWS KMS、S3 加密或其他加密解决方案加密静态数据。
- **传输加密**：使用 HTTPS、TLS 或其他加密协议加密传输中的数据。
- **数据掩码**：掩码敏感数据以防止未经授权的访问。
- **数据编辑**：从日志和其他输出中编辑敏感数据。

### 4.5 安全的 API 通信

- **HTTPS**：对所有 API 通信使用 HTTPS。
- **API 密钥**：使用 API 密钥验证 API 请求。
- **OAuth 2.0**：使用 OAuth 2.0 进行授权。
- **速率限制**：实施速率限制防止滥用。
- **Web 应用程序防火墙（WAF）**：使用 WAF 保护您的 API 免受常见 Web 攻击。

## 5. 测试方法

### 5.1 单元测试策略

- **测试单个模块**：单元测试单个 Terraform 模块以确保它们正常工作。
- **模拟 AWS 资源**：模拟 AWS 资源以将您的模块与外部依赖项隔离。
- **测试变量验证**：验证变量验证规则按预期工作。
- **测试输出值**：检查模块输出是否正确。

### 5.2 集成测试

- **测试模块集成**：测试模块之间如何相互交互。
- **部署到测试环境**：将您的基础设施部署到测试环境并验证其正常工作。
- **自动化测试**：编写自动化测试以验证您的基础设施正常工作。

### 5.3 端到端测试

- **测试完整基础设施**：从端到端测试整个基础设施。
- **模拟用户行为**：模拟用户行为以验证您的基础设施正常工作。
- **监控性能**：监控性能以识别任何性能瓶颈。

### 5.4 测试组织

- **单独的测试目录**：为您的测试创建单独的目录。
- **测试命名约定**：为您的测试使用清晰的命名约定。
- **测试文档**：记录您的测试以解释它们正在测试什么。

### 5.5 模拟和存根

- **使用模拟对象**：使用模拟对象将您的代码与外部依赖项隔离。
- **使用存根对象**：使用存根对象为外部依赖项提供固定响应。
- **Terratest**：利用 Terratest 创建测试环境并执行基础设施测试。

## 6. 常见陷阱和注意事项

### 6.1 开发人员常犯的错误

- **忘记启用状态锁定**：启用状态锁定对于防止损坏和确保多个用户在同一 Terraform 项目上工作时的完整性至关重要。
- **忽略 IAM 权限**：确保 Terraform 服务账户具有创建、修改和删除资源的必要 IAM 权限至关重要。
- **错误的资源依赖关系**：正确管理资源依赖关系以防止创建或删除期间的错误。
- **不安全地处理敏感数据**：通过使用 AWS Secrets Manager 或其他适当服务实施管理敏感数据（如 API 密钥和密码）的强大措施。
- **忽略监控基础设施**：设置全面的监控和警报以及时检测和响应基础设施问题。
- **使用硬编码值**：始终使用变量

### 6.2 需要注意的边缘情况

- **资源限制**：了解 AWS 资源限制并相应规划。
- **可用区**：了解可用区的影响并设计您的基础设施以抵御 AZ 故障。
- **数据一致性**：了解不同 AWS 服务的一致性模型并相应设计您的应用程序。
- **API 限流**：了解 API 限流限制并实施重试逻辑。

### 6.3 版本特定问题

- **Terraform 版本兼容性**：确保您的 Terraform 代码与您使用的 Terraform 版本兼容。
- **提供者版本兼容性**：确保您的 Terraform 提供者与您使用的 Terraform 版本兼容。
- **AWS API 版本兼容性**：了解 AWS API 的更改并相应更新您的代码。

### 6.4 兼容性问题

- **向后兼容性**：确保您的更改向后兼容。
- **跨区域兼容性**：确保您的基础设施在不同 AWS 区域之间兼容。
- **跨账户兼容性**：确保您的基础设施在不同 AWS 账户之间兼容。

### 6.5 调试策略

- **Terraform Plan**：使用 `terraform plan` 在应用更改之前预览更改。
- **Terraform Show**：使用 `terraform show` 检查基础设施的当前状态。
- **Terraform Graph**：使用 `terraform graph` 可视化资源之间的依赖关系。
- **Terraform Console**：使用 `terraform console` 评估 Terraform 表达式。
- **AWS CloudTrail**：使用 AWS CloudTrail 审计 API 调用并识别错误。
- **CloudWatch Logs**：使用 CloudWatch Logs 收集和分析应用程序日志。
- **启用调试日志记录**：启用调试日志记录以获取有关 Terraform 正在执行的操作的更详细信息。

## 7. 工具和环境

### 7.1 推荐的开发工具

- **Terraform CLI**：Terraform 命令行界面。
- **支持 Terraform 的 IDE**：使用支持 Terraform 的 IDE（例如，带有 Terraform 扩展的 VS Code）。
- **tfenv**：使用 tfenv 管理多个版本的 Terraform。
- **AWS CLI**：AWS 命令行界面。
- **jq**：命令行 JSON 处理器。

### 7.2 构建配置

- **Makefile**：使用 Makefile 自动化常见构建任务（例如，`terraform init`、`terraform plan`、`terraform apply`）。
- **.terraformignore**：创建 `.terraformignore` 以防止文件包含在 Terraform 包中。

### 7.3 代码检查和格式化

- **terraform fmt**：使用 `terraform fmt` 自动格式化您的 Terraform 代码。
- **terraform validate**：使用 `terraform validate` 验证您的 Terraform 代码。
- **tflint**：使用 `tflint` 检查您的 Terraform 代码。
- **pre-commit hooks**：使用 pre-commit hooks 强制执行代码质量标准。

### 7.4 部署最佳实践

- **自动化部署**：使用自动化部署减少错误并提高一致性。
- **基础设施即代码（IaC）**：使用 Terraform 等工具将基础设施作为代码管理。
- **不可变基础设施**：部署新的基础设施组件而不是修改现有组件。
- **蓝/绿部署**：在现有应用程序旁边部署新版本应用程序，然后切换流量。
- **金丝雀部署**：在向所有人推出之前，将新版本应用程序部署到一小部分用户。

### 7.5 CI/CD 集成

- **与 CI/CD 管道集成**：将 Terraform 与您的 CI/CD 管道集成。
- **自动化测试**：作为 CI/CD 管道的一部分运行自动化测试。
- **自动化部署**：作为 CI/CD 管道的一部分自动部署您的基础设施。
- **版本控制**：将您的 Terraform 代码存储在版本控制中。
- **Terraform Cloud/Enterprise**：使用 Terraform Cloud/Enterprise 进行远程状态管理和协作。

本文档为使用 Terraform 进行 AWS 开发提供了一套全面的最佳实践。通过遵循这些指导原则，您可以确保您的代码可维护、安全且高效。
