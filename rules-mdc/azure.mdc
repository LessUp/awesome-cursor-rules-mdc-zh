---
description: 本规范为开发 Azure 应用程序提供全面的最佳实践，涵盖代码组织、安全性、性能、测试和常见陷阱。旨在提高代码质量、安全态势和在 Azure 生态系统中工作的整体效率。
globs: "*.az,*.tf,*.bicep,*.py,*.js,*.ts,*.json,*.yml,*.yaml,*.ps1,*.sh,*.cs,*.java"
---
# Azure 库最佳实践和编码标准

本文档概述了使用 Azure 服务开发应用程序和基础设施的推荐最佳实践。它涵盖了包括代码组织、安全性、性能、测试和工具在内的各个方面，以确保强大、可扩展和安全的解决方案。

## 1. 代码组织和结构

良好组织的代码库对于可维护性、可扩展性和协作至关重要。以下指导原则提供了组织 Azure 项目的结构化方法。

### 目录结构最佳实践

基于应用程序的架构和组件采用模块化和逻辑的目录结构。

- **`src/`**：包含应用程序的源代码。
  - **`modules/`**：将相关功能分组为独立模块。
  - **`components/`**：包含可重用的 UI 或逻辑组件。
  - **`services/`**：封装外部服务集成（例如，Azure Storage、Cosmos DB）。
  - **`models/`**：定义数据模型和架构。
  - **`utils/`**：包含工具函数和辅助类。
- **`infra/` 或 `terraform/` 或 `bicep/`**：基础设施即代码定义（Terraform、Bicep、Azure 资源管理器模板）。
- **`config/`**：不同环境的配置文件（开发、暂存、生产）。
- **`scripts/`**：部署、构建过程等的自动化脚本。
- **`tests/`**：单元、集成和端到端测试。
- **`docs/`**：项目及其组件的文档。

示例：

```
my-azure-project/
├── src/
│   ├── modules/
│   │   ├── user-management/
│   │   │   ├── ...
│   │   ├── data-processing/
│   │   │   ├── ...
│   ├── components/
│   │   ├── button/
│   │   │   ├── ...
│   ├── services/
│   │   ├── storage-service.js
│   │   ├── cosmosdb-service.js
│   ├── models/
│   │   ├── user.js
│   ├── utils/
│   │   ├── logger.js
├── infra/
│   ├── main.tf
│   ├── variables.tf
│   ├── outputs.tf
├── config/
│   ├── development.json
│   ├── production.json
├── scripts/
│   ├── deploy.sh
│   ├── build.sh
├── tests/
│   ├── unit/
│   ├── integration/
│   ├── e2e/
├── docs/
│   ├── README.md
├── .gitignore
├── package.json
```

### 文件命名约定

在文件命名中保持一致性以提高可读性和可搜索性。

- 使用反映文件用途的描述性名称。
- 使用一致的大小写（例如，camelCase 或 kebab-case）。
- 使用适当的文件扩展名（例如，`.js`、`.ts`、`.py`、`.tf`、`.bicep`）。
- 对于 React 组件，使用 `ComponentName.jsx` 或 `ComponentName.tsx`。

示例：

- `user-service.js`（用于用户服务模块）
- `UserProfile.jsx`（用于用户配置文件组件）
- `storage-account.tf`（用于定义存储账户的 Terraform 文件）

### 模块组织

基于功能将应用程序分为独立和可重用的模块。

- 每个模块应有明确的职责和定义良好的接口。
- 最小化模块之间的依赖关系以促进松耦合。
- 考虑使用模块打包器（例如，Webpack、Parcel）管理依赖关系并优化构建过程。

示例：

`user-management` 模块可以包含与用户身份验证、授权和配置文件管理相关的组件和服务。

### 组件架构

对于基于 UI 的应用程序，采用基于组件的架构（例如，React、Angular、Vue.js）。

- 将 UI 分为具有清晰输入和输出的可重用组件。
- 遵循单一职责和关注点分离的原则。
- 使用组件库（例如，Material UI、Ant Design）加速开发并保持一致性。

### 代码分割策略

通过将应用程序分割为可按需加载的较小块来改善初始加载时间。

- 使用动态导入仅在需要时加载模块。
- 配置模块打包器为应用程序的不同部分创建单独的块。
- 考虑为单页应用程序使用基于路由的代码分割。

## 2. 常见模式和反模式

理解常见模式和反模式对于构建高效、可维护和可靠的 Azure 应用程序至关重要。

### Azure 特定的设计模式

- **重试模式：** 实施重试逻辑以处理与 Azure 服务交互时的瞬态故障。
- **断路器模式：** 通过临时阻止对遇到问题的服务的访问来防止级联故障。
- **基于队列的负载均衡：** 使用队列（例如，Azure Queue Storage、Azure Service Bus）解耦组件并处理流量突发。
- **缓存旁路模式：** 使用缓存（例如，Azure Cache for Redis）通过存储频繁访问的数据来提高性能。
- **网关聚合模式：** 通过单个 API 网关（例如，Azure API Management）暴露多个后端服务。

### 常见任务的推荐方法

- **配置管理：** 使用 Azure App Configuration 管理应用程序设置和功能标志。
- **机密管理：** 使用 Azure Key Vault 安全存储和管理机密、密钥和证书。
- **日志记录和监控：** 使用 Azure Monitor 收集和分析日志、指标和跟踪。
- **身份和访问管理：** 使用 Azure Active Directory (Azure AD) 进行身份验证和授权。
- **数据存储：** 根据数据需求选择适当的 Azure 存储服务（例如，Azure Blob Storage 用于非结构化数据，Azure Cosmos DB 用于 NoSQL 数据，Azure SQL Database 用于关系数据）。

### 要避免的反模式和代码异味

- **硬编码机密：** 绝不在代码中硬编码机密或 API 密钥。使用 Azure Key Vault 安全管理它们。
- **忽略错误：** 始终优雅地处理错误并记录相关信息以进行调试。
- **过度工程：** 避免不必要的复杂性，专注于交付业务价值。
- **长时间运行的事务：** 保持事务简短，避免长时间持有资源。
- **紧耦合：** 设计组件和模块为松耦合以提高可维护性和可测试性。
- **单体函数：** 避免创建大型、复杂的函数。将它们分解为更小、更易管理的单元。

### 状态管理最佳实践

- 对于无服务器函数，尽可能设计为无状态。将状态存储在外部存储服务中，如 Azure Cosmos DB 或 Azure Storage。
- 对于 Web 应用程序，使用适当的状态管理技术（例如，cookies、sessions、local storage，或专用状态管理库如 Redux 或 Zustand）。
- 考虑使用分布式缓存（例如，Azure Cache for Redis）提高性能和可扩展性。

### 错误处理模式

- 使用 try-catch 块优雅地处理异常。
- 记录错误并提供足够的详细信息以帮助调试。
- 实施集中错误处理机制来捕获和处理未处理的异常。
- 向用户提供有意义的错误消息。
- 使用 Polly 库实施重试、断路器和超时等弹性策略。

## 3. 性能考虑

优化性能对于交付响应迅速且可扩展的 Azure 应用程序至关重要。

### 优化技术

- **缓存：** 在各个级别（例如，浏览器、服务器、数据库）实施缓存以减少延迟并提高性能。
- **压缩：** 启用压缩（例如，Gzip）以减少 HTTP 响应的大小。
- **连接池：** 使用连接池重用数据库连接并减少连接开销。
- **内容分发网络（CDN）：** 使用 Azure CDN 将静态资源缓存到更接近用户的位置。
- **数据库优化：** 优化数据库查询和索引以提高查询性能。
- **异步操作：** 使用异步操作避免阻塞主线程。

### 内存管理

- **释放资源：** 正确释放可释放资源（例如，数据库连接、文件流）以避免内存泄漏。
- **垃圾回收：** 了解垃圾回收行为并避免创建不必要的对象。
- **大对象堆（LOH）：** 注意 LOH 并避免频繁分配大对象。

### 渲染优化

- **虚拟化：** 使用虚拟化技术（例如，React Virtualized、Angular CDK Virtual Scroll）高效渲染大型数据列表。
- **防抖和节流：** 使用防抖和节流限制事件处理程序的频率。
- **延迟加载：** 仅在图像和其他资源在屏幕上可见时加载它们。

### 包大小优化

- **树摇：** 使用树摇从包中删除未使用的代码。
- **代码分割：** 将代码分割为可按需加载的较小块。
- **压缩：** 压缩代码以减少其大小。
- **图像优化：** 通过压缩图像并使用适当格式来优化图像。

### 延迟加载策略

- **基于组件的延迟加载：** 仅在需要时加载组件。
- **基于路由的延迟加载：** 仅在访问特定路由时加载与这些路由关联的模块。
- **图像延迟加载：** 仅在图像滚动到视图中时加载图像。

## 4. 安全最佳实践

在开发 Azure 应用程序时，安全性应该是首要优先级。

### 常见漏洞及其预防方法

- **SQL 注入：** 使用参数化查询或 ORM 防止 SQL 注入攻击。
- **跨站脚本（XSS）：** 清理用户输入和输出以防止 XSS 攻击。
- **跨站请求伪造（CSRF）：** 使用反 CSRF 令牌防止 CSRF 攻击。
- **身份验证和授权缺陷：** 实施强大的身份验证和授权机制。
- **不安全的直接对象引用（IDOR）：** 验证用户是否有权访问他们请求的资源。
- **安全配置错误：** 遵循配置 Azure 服务的安全最佳实践。
- **敏感数据暴露：** 通过在静态和传输中加密敏感数据来保护它们。

### 输入验证

- 在客户端和服务器端验证所有用户输入。
- 使用架构验证库（例如，Joi、Yup）定义和强制执行数据验证规则。
- 清理用户输入以删除潜在恶意字符。

### 身份验证和授权模式

- 使用 Azure Active Directory (Azure AD) 进行身份验证和授权。
- 实施基于角色的访问控制（RBAC）根据用户角色限制对资源的访问。
- 使用多因素身份验证（MFA）增强安全性。
- 遵循最小权限原则。
- 利用 Azure 资源的托管身份安全访问其他 Azure 服务。

### 数据保护策略

- 使用 Azure Storage Service Encryption (SSE) 或 Azure Disk Encryption 加密静态敏感数据。
- 使用 TLS/SSL 加密传输中的数据。
- 使用 Azure Key Vault 存储和管理加密密钥。
- 实施数据掩码和令牌化以保护敏感数据。

### 安全的 API 通信

- 对所有 API 通信使用 HTTPS。
- 使用 API 密钥、令牌或 OAuth 2.0 实施 API 身份验证。
- 使用速率限制防止滥用。
- 使用 Azure API Management 管理和保护您的 API。

## 5. 测试方法

彻底的测试对于确保 Azure 应用程序的质量和可靠性至关重要。

### 单元测试策略

- 为单个组件和函数编写单元测试。
- 使用单元测试框架（例如，Jest、Mocha、JUnit、pytest）。
- 追求高代码覆盖率。
- 遵循 Arrange-Act-Assert 模式。
- 使用模拟和存根隔离被测代码。

### 集成测试

- 编写集成测试以验证不同组件和服务之间的交互。
- 测试与 Azure 服务的集成（例如，Azure Storage、Cosmos DB）。
- 使用与生产环境密切相似的测试环境。

### 端到端测试

- 编写端到端测试以验证整个应用程序工作流程。
- 使用测试框架（例如，Cypress、Selenium、Playwright）。
- 将端到端测试自动化作为 CI/CD 管道的一部分。

### 测试组织

- 将测试组织成清晰的目录结构。
- 使用描述性测试名称。
- 将相关测试分组在一起。

### 模拟和存根

- 使用模拟模拟外部依赖项的行为。
- 使用存根为 API 调用提供预定义响应。
- 使用模拟框架（例如，Mockito、Jest Mocks）。

## 6. 常见陷阱和注意事项

了解常见陷阱和注意事项以避免在开发 Azure 应用程序时犯错误。

### 开发人员常犯的错误

- **资源大小不足：** 低估所需资源可能导致性能问题。
- **忽略 Azure 服务限制：** 不了解 Azure 服务限制可能导致意外错误。
- **错误的错误处理：** 不充分的错误处理可能使诊断和解决问题变得困难。
- **缺乏监控：** 未能监控应用程序的性能和健康状况可能导致未检测到的问题。
- **忽视安全性：** 忽略安全最佳实践可能使应用程序暴露于漏洞。

### 需要注意的边缘情况

- **网络延迟：** 在与 Azure 服务交互时注意网络延迟。
- **瞬态故障：** 实施重试逻辑处理瞬态故障。
- **资源争用：** 注意资源争用并设计应用程序优雅地处理它。
- **数据一致性：** 了解 Azure 存储服务的数据一致性模型。

### 版本特定问题

- 了解 Azure SDK 和 API 中的破坏性更改。
- 保持依赖项最新。
- 使用不同版本的 Azure 服务测试应用程序。

### 兼容性问题

- 确保应用程序与目标 Azure 环境兼容。
- 在不同浏览器和设备上测试应用程序。

### 调试策略

- 使用 Azure Monitor 收集和分析日志、指标和跟踪。
- 使用远程调试调试在 Azure 中运行的应用程序。
- 使用日志记录跟踪执行流程并识别错误。
- 使用断点暂停执行并检查变量。

## 7. 工具和环境

选择正确的工具和环境可以显著改善您的开发体验。

### 推荐的开发工具

- **Visual Studio Code：** 一个流行的代码编辑器，对 Azure 开发有出色支持。
- **Azure CLI：** 用于管理 Azure 资源的命令行工具。
- **Azure PowerShell：** 用于管理 Azure 资源的 PowerShell 模块。
- **Terraform：** 用于配置和管理 Azure 资源的基础设施即代码工具。
- **Bicep：** 用于部署 Azure 资源的声明性语言。
- **Azure SDK：** 用于从各种编程语言与 Azure 服务交互的库。

### 构建配置

- 使用构建自动化工具（例如，Azure DevOps、Jenkins、GitHub Actions）自动化构建过程。
- 配置构建过程以运行测试、检查器和代码格式化程序。
- 使用环境变量为不同环境配置应用程序。

### 代码检查和格式化

- 使用检查器（例如，ESLint、Pylint）强制执行代码风格指导原则。
- 使用代码格式化程序（例如，Prettier、Black）自动格式化代码。
- 配置编辑器在保存时自动运行检查器和格式化程序。

### 部署最佳实践

- 使用基础设施即代码（IaC）自动化 Azure 资源的部署。
- 使用部署管道（例如，Azure Pipelines、GitHub Actions）自动化部署过程。
- 使用蓝绿部署或金丝雀部署最小化停机时间。
- 实施回滚策略以在必要时快速恢复到先前版本。

### CI/CD 集成

- 将 CI/CD 管道与 Azure DevOps、GitHub Actions 或其他 CI/CD 工具集成。
- 自动化构建、测试和部署过程。
- 使用环境变量为不同环境配置应用程序。
- 实施自动化测试以在开发周期早期捕获错误。

通过遵循这些最佳实践，您可以构建强大、可扩展、安全和可维护的 Azure 应用程序。
