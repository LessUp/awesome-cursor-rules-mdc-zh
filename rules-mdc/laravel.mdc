---
description: 本规范概述了 Laravel 开发的综合最佳实践，涵盖编码标准、安全性、性能和测试，以确保应用程序的可维护性、高效性和安全性。它提供了代码组织、常见模式、性能考虑、安全最佳实践、测试方法、常见陷阱和工具的指导原则。
globs: "*.php"
---
- 遵循 PSR 编码标准（PSR-1、PSR-2、PSR-12）。
- 使用有意义和描述性的变量、函数和类名。
- 有效组织路由，利用资源控制器和路由组。
- 使用 Eloquent ORM 进行数据库交互；尽可能避免原始 SQL 查询（除非性能需要）。
- 使用 Laravel 的缓存系统为频繁访问的数据实现缓存策略。
- 遵循 Laravel 的约定维护清晰一致的项目结构（app、config、database、public、resources、routes、storage）。
- 确保代码简洁和可读性以增强可维护性。遵循单一职责原则。
- 保持 Laravel 及其包的最新状态，以减轻安全漏洞并利用新功能。

### 1. 代码组织和结构：

   - **目录结构最佳实践：**
     - 遵循 Laravel 的默认目录结构：`app`（核心应用程序逻辑）、`config`（配置文件）、`database`（迁移和种子）、`public`（静态资源）、`resources`（视图和资源）、`routes`（路由定义）、`storage`（文件存储）。
     - 使用子目录组织 `app` 目录，如 `Models`、`Controllers`、`Services`、`Repositories`、`Exceptions`、`Policies`、`Providers` 和 `Http/Middleware`。
     - 对于大型应用程序，考虑使用模块来封装功能。

   - **文件命名约定：**
     - 类名使用 PascalCase（例如，`UserController`）。
     - 变量和函数名使用 camelCase（例如，`$userName`、`getUserName()`）。
     - 数据库表名和列名使用 snake_case（例如，`users`、`user_id`）。
     - 路由名使用 kebab-case（例如，`user.profile`）。
     - 使用清楚表明文件或类用途的描述性名称。

   - **模块组织：**
     - 对于大型应用程序，使用包或模块将代码组织成可重用的组件。
     - 实现模块特定的服务提供者、路由和配置。
     - 隔离模块依赖项以防止冲突。

   - **组件架构：**
     - 使用 Blade 组件创建可重用的 UI 元素。
     - 为复杂逻辑和渲染创建自定义组件。
     - 使用属性和插槽向组件传递数据。
     - 在专用类中封装组件逻辑。

   - **代码分割策略：**
     - 对非关键功能使用延迟加载。
     - 将大型控制器分割为更小、更易管理的类。
     - 将复杂逻辑提取到服务类或仓储中。

### 2. 常见模式和反模式：

   - **Laravel 特定的设计模式：**
     - **仓储模式：** 从控制器中抽象数据访问逻辑。
     - **服务模式：** 将业务逻辑封装到可重用的类中。
     - **观察者模式：** 为模型变更实现事件驱动行为。
     - **工厂模式：** 创建测试数据和种子数据库。
     - **策略模式：** 定义算法族并使它们可互换。

   - **常见任务的推荐方法：**
     - 使用 Eloquent ORM 进行数据库交互，包括关系和聚合。
     - 使用 Laravel 的验证系统进行请求数据验证。
     - 使用中间件进行身份验证、授权和请求修改。
     - 使用队列进行后台处理和异步任务。
     - 使用事件和监听器解耦组件。

   - **要避免的反模式和代码异味：**
     - **上帝类：** 避免创建承担太多职责的大型类。
     - **意大利面条代码：** 避免复杂且无结构的代码，这些代码难以理解和维护。
     - **复制粘贴编程：** 避免重复代码；相反，创建可重用的组件或函数。
     - **忽略异常：** 始终正确处理异常以防止意外行为。
     - **过度工程：** 不要用不必要的复杂性使解决方案过于复杂。
     - **批量赋值漏洞：** 使用受保护或可填充属性防止批量赋值漏洞。

   - **状态管理最佳实践：**
     - 使用会话存储用户特定数据。
     - 使用 cookie 存储客户端数据。
     - 使用缓存存储频繁访问的数据。
     - 使用数据库进行持久数据存储。
     - 考虑使用 Laravel 的广播功能进行实时更新。

   - **错误处理模式：**
     - 使用 try-catch 块优雅地处理异常。
     - 使用 Laravel 的异常处理程序记录和报告错误。
     - 为特定错误场景实现自定义异常类。
     - 向用户提供信息性错误消息。

### 3. 性能考虑：

   - **优化技术：**
     - 使用缓存减少数据库查询并提高响应时间。
     - 使用预加载减少 N+1 查询问题。
     - 使用队列进行后台处理。
     - 使用索引和查询优化技术优化数据库查询。
     - 在性能关键代码中最小化循环和条件语句的使用。

   - **内存管理：**
     - 避免在内存中存储大量数据。
     - 使用垃圾回收释放内存。
     - 使用流处理大文件。

   - **渲染优化：**
     - 使用 Blade 的缓存功能缓存渲染的视图。
     - 使用 CSS 和 JavaScript 压缩减少文件大小。
     - 使用图像优化技术减少图像大小。

   - **包大小优化：**
     - 使用 Laravel Mix 打包和压缩资源。
     - 删除未使用的 CSS 和 JavaScript 代码。
     - 使用代码分割为每个页面仅加载必要的代码。

   - **延迟加载策略：**
     - 对图像和其他非关键资源使用延迟加载。
     - 使用路由模型绑定与预加载减少数据库查询。

### 4. 安全最佳实践：

   - **常见漏洞及其预防方法：**
     - **SQL 注入：** 使用 Eloquent ORM 和预处理语句防止 SQL 注入攻击。
     - **跨站脚本（XSS）：** 清理用户输入并转义输出以防止 XSS 攻击。
     - **跨站请求伪造（CSRF）：** 使用 CSRF 保护令牌防止 CSRF 攻击。
     - **批量赋值：** 使用受保护或可填充属性防止批量赋值漏洞。
     - **身份验证和授权：** 使用 Laravel 的内置身份验证和授权功能。

   - **输入验证：**
     - 使用 Laravel 的验证系统验证所有用户输入。
     - 清理用户输入以删除潜在有害字符。
     - 验证文件上传以防止恶意文件被上传。

   - **身份验证和授权模式：**
     - 使用 Laravel 的内置身份验证系统进行用户身份验证。
     - 使用策略定义授权规则。
     - 使用门控授权访问特定资源。
     - 实现双因素身份验证以增强安全性。

   - **数据保护策略：**
     - 使用 Laravel 的加密功能加密敏感数据。
     - 使用 bcrypt 哈希存储密码。
     - 保护 API 密钥和其他敏感配置数据。

   - **安全的 API 通信：**
     - 对所有 API 通信使用 HTTPS。
     - 使用 API 令牌进行身份验证。
     - 实现速率限制防止滥用。
     - 验证 API 请求和响应。

### 5. 测试方法：

   - **单元测试策略：**
     - 独立测试单个代码单元。
     - 使用模拟对象隔离依赖项。
     - 为所有关键代码路径编写测试。

   - **集成测试：**
     - 测试应用程序不同组件之间的交互。
     - 测试数据库交互和外部 API 调用。

   - **端到端测试：**
     - 从端到端测试整个应用程序。
     - 使用浏览器自动化工具模拟用户交互。

   - **测试组织：**
     - 将测试组织成逻辑组。
     - 使用描述性测试名称。
     - 遵循 arrange-act-assert 模式。

   - **模拟和存根：**
     - 使用模拟对象隔离依赖项。
     - 使用存根用更简单的实现替换复杂的依赖项。

### 6. 常见陷阱和注意事项：

   - **开发人员常犯的错误：**
     - 未正确使用依赖注入。
     - 在视图中编写复杂逻辑。
     - 未有效使用缓存。
     - 忽略安全漏洞。
     - 不编写测试。

   - **需要注意的边缘情况：**
     - 处理大文件上传。
     - 处理并发请求。
     - 处理数据库连接错误。
     - 处理时区转换。

   - **版本特定问题：**
     - 注意 Laravel 版本之间的破坏性变更。
     - 升级到新版本时查阅 Laravel 升级指南。

   - **兼容性问题：**
     - 确保与不同 PHP 版本和扩展的兼容性。
     - 确保与不同数据库系统的兼容性。

   - **调试策略：**
     - 使用 Laravel 的调试工具（例如，debugbar、telescope）。
     - 使用日志记录跟踪应用程序行为。
     - 使用 Xdebug 进行逐步调试。

### 7. 工具和环境：

   - **推荐的开发工具：**
     - PHPStorm 或带有 PHP 扩展的 VS Code。
     - Composer 用于依赖管理。
     - MySQL 或 PostgreSQL 用于数据库管理。
     - Docker 用于容器化。

   - **构建配置：**
     - 使用 Laravel Mix 编译资源。
     - 使用环境变量配置应用程序。
     - 使用构建脚本自动化构建过程。

   - **代码检查和格式化：**
     - 使用 PHP CS Fixer 强制执行编码标准。
     - 使用 ESLint 和 Prettier 进行 JavaScript 和 CSS 检查和格式化。

   - **部署最佳实践：**
     - 使用 Envoyer 或 Deployer 等部署工具。
     - 使用零停机部署策略。
     - 对静态资源使用 CDN。

   - **CI/CD 集成：**
     - 使用 CI/CD 管道自动化测试和部署。
     - 使用 Jenkins、GitLab CI 或 GitHub Actions 等工具。
