---
description: 强制执行 PostgreSQL 编码标准、最佳实践和性能优化技术，以确保可维护、高效和安全的数据库交互。此规则涵盖代码格式、数据完整性、安全性和性能考虑。
globs: "*.sql,*.plpgsql,*.c,*.h"
---
- **代码格式和注释：**
  - 使用 `pgformatter` 或类似工具保持一致的代码格式。
  - 使用清晰简洁的注释解释复杂逻辑和意图。定期更新注释以避免混淆。
  - 谨慎使用内联注释；对于详细解释，优先使用块注释。
  - 用简单易懂的英语编写注释。
  - 在行注释后添加空格（`-- 一个注释`）；对于注释掉的代码不要添加空格（`--raise notice`）。
  - 保持注释最新；错误的注释比没有注释更糟糕。

- **命名约定：**
  - 对标识符使用 `snake_case`（例如，`user_id`、`customer_name`）。
  - 对表名使用复数名词（例如，`customers`、`products`）。
  - 对函数、过程和触发器使用一致的命名约定。
  - 为所有数据库对象选择描述性和有意义的名称。

- **数据完整性和数据类型：**
  - 为列使用适当的数据类型以确保数据完整性（例如，`INTEGER`、`VARCHAR`、`TIMESTAMP`）。
  - 使用约束（例如，`NOT NULL`、`UNIQUE`、`CHECK`、`FOREIGN KEY`）强制数据完整性。
  - 为所有表定义主键。
  - 使用外键建立表之间的关系。
  - 利用域来强制执行可在多个列中重用的数据类型约束。

- **SQL 注入防护：**
  - 始终使用参数化查询或预处理语句防止 SQL 注入攻击。
  - 在 SQL 查询中使用用户输入之前对其进行清理。
  - 避免通过直接连接字符串构造 SQL 查询。
  - 使用 `quote_literal()` 和 `quote_ident()` 函数正确转义字符串和标识符。

- **事务管理：**
  - 使用显式事务确保数据一致性和原子性。
  - 使用 `BEGIN;` 开始事务，使用 `COMMIT;` 或 `ROLLBACK;` 结束事务。
  - 正确处理事务错误以防止数据损坏。
  - 使用保存点允许在事务内进行部分回滚。

- **索引：**
  - 在 `WHERE` 子句和 `JOIN` 条件中频繁使用的列上创建索引。
  - 避免过度索引，因为它会减慢写操作。
  - 考虑为特定查询模式使用部分索引。
  - 根据数据和查询要求使用适当的索引类型（例如，`B-tree`、`Hash`、`GIN`、`GiST`）。
  - 使用 `ANALYZE` 和 `VACUUM` 定期分析和维护索引。

- **查询优化：**
  - 使用 `EXPLAIN ANALYZE` 分析查询执行计划并识别性能瓶颈。
  - 避免使用 `SELECT *`，仅指定必要的列。
  - 尽可能使用 `JOIN` 操作而不是子查询。
  - 优化 `WHERE` 子句以减少处理的行数。
  - 考虑为频繁执行的复杂查询使用物化视图。
  - 用更高效的替代方案重写性能缓慢的查询。

- **PL/pgSQL 最佳实践：**
  - 保持 PL/pgSQL 函数和过程简短且专注。
  - 使用异常处理优雅地处理错误。
  - 使用 `RAISE NOTICE`、`RAISE WARNING` 和 `RAISE EXCEPTION` 进行日志记录和错误报告。
  - 除非绝对必要，避免使用游标；优先使用基于集合的操作。
  - 使用 `STRICT` 属性确保函数返回值。

- **安全最佳实践：**
  - 向数据库用户授予必要的最小权限。
  - 使用角色管理权限。
  - 定期审计数据库活动。
  - 对静态和传输中的敏感数据进行加密。
  - 对需要提升权限的函数使用 `SECURITY DEFINER` 属性。
  - 配置适当的身份验证机制（例如，`SCRAM-SHA-256`）。

- **连接管理：**
  - 使用连接池减少建立新连接的开销。
  - 在不再需要连接时关闭连接。
  - 配置连接超时以防止空闲连接消耗资源。

- **备份和恢复：**
  - 实施强大的备份和恢复策略。
  - 定期备份数据库。
  - 测试恢复过程以确保其按预期工作。
  - 考虑使用复制实现高可用性。

- **代码组织和结构：**
  - 根据功能或应用程序模块将数据库对象组织到模式中。
  - 对数据库脚本和迁移使用版本控制。
  - 对数据库相关文件遵循一致的目录结构。

- **常见陷阱和注意事项：**
  - 避免使用保留关键字作为标识符。
  - 注意数据类型的限制（例如，`VARCHAR` 列的最大长度）。
  - 小心处理空值。
  - 在将数据库更改部署到生产环境之前彻底测试。

- **工具和环境：**
  - 使用具有 SQL 语法高亮和自动完成功能的代码编辑器。
  - 使用数据库客户端工具查询和管理数据库（例如，`pgAdmin`、`DBeaver`、`psql`）。
  - 使用版本控制系统（例如，Git）管理数据库脚本和迁移。
  - 使用 CI/CD 管道自动化数据库部署。

- **C 编码标准（扩展 PostgreSQL 时）：**
  - 遵循 C99 标准。仅使用 C99 标准中可用的语言功能。
  - 遵循 PostgreSQL 的源代码约定（[PostgreSQL 文档](https://www.postgresql.org/docs/current/source-conventions.html)）。
  - 小心管理内存；避免内存泄漏。
  - 正确处理错误和异常。
  - 彻底记录代码。

- **特定用例优化：**
  - 时间序列数据：考虑 timescaledb 扩展
  - 地理空间数据：考虑 postgis 扩展

@file ./rules/postgresql_security_rules.mdc
